// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resources

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

type AliasPathMetadataResponse struct {
	// The attributes of the token that the alias path is referring to.
	Attributes string `pulumi:"attributes"`
	// The type of the token that the alias path is referring to.
	Type string `pulumi:"type"`
}

type AliasPathMetadataResponseOutput struct{ *pulumi.OutputState }

func (AliasPathMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasPathMetadataResponse)(nil)).Elem()
}

func (o AliasPathMetadataResponseOutput) ToAliasPathMetadataResponseOutput() AliasPathMetadataResponseOutput {
	return o
}

func (o AliasPathMetadataResponseOutput) ToAliasPathMetadataResponseOutputWithContext(ctx context.Context) AliasPathMetadataResponseOutput {
	return o
}

func (o AliasPathMetadataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AliasPathMetadataResponse] {
	return pulumix.Output[AliasPathMetadataResponse]{
		OutputState: o.OutputState,
	}
}

// The attributes of the token that the alias path is referring to.
func (o AliasPathMetadataResponseOutput) Attributes() pulumi.StringOutput {
	return o.ApplyT(func(v AliasPathMetadataResponse) string { return v.Attributes }).(pulumi.StringOutput)
}

// The type of the token that the alias path is referring to.
func (o AliasPathMetadataResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AliasPathMetadataResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The type of the paths for alias.
type AliasPathResponse struct {
	// The API versions.
	ApiVersions []string `pulumi:"apiVersions"`
	// The metadata of the alias path. If missing, fall back to the default metadata of the alias.
	Metadata AliasPathMetadataResponse `pulumi:"metadata"`
	// The path of an alias.
	Path *string `pulumi:"path"`
	// The pattern for an alias path.
	Pattern *AliasPatternResponse `pulumi:"pattern"`
}

// The type of the paths for alias.
type AliasPathResponseOutput struct{ *pulumi.OutputState }

func (AliasPathResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasPathResponse)(nil)).Elem()
}

func (o AliasPathResponseOutput) ToAliasPathResponseOutput() AliasPathResponseOutput {
	return o
}

func (o AliasPathResponseOutput) ToAliasPathResponseOutputWithContext(ctx context.Context) AliasPathResponseOutput {
	return o
}

func (o AliasPathResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AliasPathResponse] {
	return pulumix.Output[AliasPathResponse]{
		OutputState: o.OutputState,
	}
}

// The API versions.
func (o AliasPathResponseOutput) ApiVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AliasPathResponse) []string { return v.ApiVersions }).(pulumi.StringArrayOutput)
}

// The metadata of the alias path. If missing, fall back to the default metadata of the alias.
func (o AliasPathResponseOutput) Metadata() AliasPathMetadataResponseOutput {
	return o.ApplyT(func(v AliasPathResponse) AliasPathMetadataResponse { return v.Metadata }).(AliasPathMetadataResponseOutput)
}

// The path of an alias.
func (o AliasPathResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasPathResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The pattern for an alias path.
func (o AliasPathResponseOutput) Pattern() AliasPatternResponsePtrOutput {
	return o.ApplyT(func(v AliasPathResponse) *AliasPatternResponse { return v.Pattern }).(AliasPatternResponsePtrOutput)
}

type AliasPathResponseArrayOutput struct{ *pulumi.OutputState }

func (AliasPathResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AliasPathResponse)(nil)).Elem()
}

func (o AliasPathResponseArrayOutput) ToAliasPathResponseArrayOutput() AliasPathResponseArrayOutput {
	return o
}

func (o AliasPathResponseArrayOutput) ToAliasPathResponseArrayOutputWithContext(ctx context.Context) AliasPathResponseArrayOutput {
	return o
}

func (o AliasPathResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AliasPathResponse] {
	return pulumix.Output[[]AliasPathResponse]{
		OutputState: o.OutputState,
	}
}

func (o AliasPathResponseArrayOutput) Index(i pulumi.IntInput) AliasPathResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AliasPathResponse {
		return vs[0].([]AliasPathResponse)[vs[1].(int)]
	}).(AliasPathResponseOutput)
}

// The type of the pattern for an alias path.
type AliasPatternResponse struct {
	// The alias pattern phrase.
	Phrase *string `pulumi:"phrase"`
	// The type of alias pattern
	Type *string `pulumi:"type"`
	// The alias pattern variable.
	Variable *string `pulumi:"variable"`
}

// The type of the pattern for an alias path.
type AliasPatternResponseOutput struct{ *pulumi.OutputState }

func (AliasPatternResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasPatternResponse)(nil)).Elem()
}

func (o AliasPatternResponseOutput) ToAliasPatternResponseOutput() AliasPatternResponseOutput {
	return o
}

func (o AliasPatternResponseOutput) ToAliasPatternResponseOutputWithContext(ctx context.Context) AliasPatternResponseOutput {
	return o
}

func (o AliasPatternResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AliasPatternResponse] {
	return pulumix.Output[AliasPatternResponse]{
		OutputState: o.OutputState,
	}
}

// The alias pattern phrase.
func (o AliasPatternResponseOutput) Phrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasPatternResponse) *string { return v.Phrase }).(pulumi.StringPtrOutput)
}

// The type of alias pattern
func (o AliasPatternResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasPatternResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The alias pattern variable.
func (o AliasPatternResponseOutput) Variable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasPatternResponse) *string { return v.Variable }).(pulumi.StringPtrOutput)
}

type AliasPatternResponsePtrOutput struct{ *pulumi.OutputState }

func (AliasPatternResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasPatternResponse)(nil)).Elem()
}

func (o AliasPatternResponsePtrOutput) ToAliasPatternResponsePtrOutput() AliasPatternResponsePtrOutput {
	return o
}

func (o AliasPatternResponsePtrOutput) ToAliasPatternResponsePtrOutputWithContext(ctx context.Context) AliasPatternResponsePtrOutput {
	return o
}

func (o AliasPatternResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AliasPatternResponse] {
	return pulumix.Output[*AliasPatternResponse]{
		OutputState: o.OutputState,
	}
}

func (o AliasPatternResponsePtrOutput) Elem() AliasPatternResponseOutput {
	return o.ApplyT(func(v *AliasPatternResponse) AliasPatternResponse {
		if v != nil {
			return *v
		}
		var ret AliasPatternResponse
		return ret
	}).(AliasPatternResponseOutput)
}

// The alias pattern phrase.
func (o AliasPatternResponsePtrOutput) Phrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasPatternResponse) *string {
		if v == nil {
			return nil
		}
		return v.Phrase
	}).(pulumi.StringPtrOutput)
}

// The type of alias pattern
func (o AliasPatternResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasPatternResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The alias pattern variable.
func (o AliasPatternResponsePtrOutput) Variable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasPatternResponse) *string {
		if v == nil {
			return nil
		}
		return v.Variable
	}).(pulumi.StringPtrOutput)
}

// The alias type.
type AliasResponse struct {
	// The default alias path metadata. Applies to the default path and to any alias path that doesn't have metadata
	DefaultMetadata AliasPathMetadataResponse `pulumi:"defaultMetadata"`
	// The default path for an alias.
	DefaultPath *string `pulumi:"defaultPath"`
	// The default pattern for an alias.
	DefaultPattern *AliasPatternResponse `pulumi:"defaultPattern"`
	// The alias name.
	Name *string `pulumi:"name"`
	// The paths for an alias.
	Paths []AliasPathResponse `pulumi:"paths"`
	// The type of the alias.
	Type *string `pulumi:"type"`
}

// The alias type.
type AliasResponseOutput struct{ *pulumi.OutputState }

func (AliasResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasResponse)(nil)).Elem()
}

func (o AliasResponseOutput) ToAliasResponseOutput() AliasResponseOutput {
	return o
}

func (o AliasResponseOutput) ToAliasResponseOutputWithContext(ctx context.Context) AliasResponseOutput {
	return o
}

func (o AliasResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AliasResponse] {
	return pulumix.Output[AliasResponse]{
		OutputState: o.OutputState,
	}
}

// The default alias path metadata. Applies to the default path and to any alias path that doesn't have metadata
func (o AliasResponseOutput) DefaultMetadata() AliasPathMetadataResponseOutput {
	return o.ApplyT(func(v AliasResponse) AliasPathMetadataResponse { return v.DefaultMetadata }).(AliasPathMetadataResponseOutput)
}

// The default path for an alias.
func (o AliasResponseOutput) DefaultPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasResponse) *string { return v.DefaultPath }).(pulumi.StringPtrOutput)
}

// The default pattern for an alias.
func (o AliasResponseOutput) DefaultPattern() AliasPatternResponsePtrOutput {
	return o.ApplyT(func(v AliasResponse) *AliasPatternResponse { return v.DefaultPattern }).(AliasPatternResponsePtrOutput)
}

// The alias name.
func (o AliasResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The paths for an alias.
func (o AliasResponseOutput) Paths() AliasPathResponseArrayOutput {
	return o.ApplyT(func(v AliasResponse) []AliasPathResponse { return v.Paths }).(AliasPathResponseArrayOutput)
}

// The type of the alias.
func (o AliasResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AliasResponseArrayOutput struct{ *pulumi.OutputState }

func (AliasResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AliasResponse)(nil)).Elem()
}

func (o AliasResponseArrayOutput) ToAliasResponseArrayOutput() AliasResponseArrayOutput {
	return o
}

func (o AliasResponseArrayOutput) ToAliasResponseArrayOutputWithContext(ctx context.Context) AliasResponseArrayOutput {
	return o
}

func (o AliasResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AliasResponse] {
	return pulumix.Output[[]AliasResponse]{
		OutputState: o.OutputState,
	}
}

func (o AliasResponseArrayOutput) Index(i pulumi.IntInput) AliasResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AliasResponse {
		return vs[0].([]AliasResponse)[vs[1].(int)]
	}).(AliasResponseOutput)
}

type ApiProfileResponse struct {
	// The API version.
	ApiVersion string `pulumi:"apiVersion"`
	// The profile version.
	ProfileVersion string `pulumi:"profileVersion"`
}

type ApiProfileResponseOutput struct{ *pulumi.OutputState }

func (ApiProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiProfileResponse)(nil)).Elem()
}

func (o ApiProfileResponseOutput) ToApiProfileResponseOutput() ApiProfileResponseOutput {
	return o
}

func (o ApiProfileResponseOutput) ToApiProfileResponseOutputWithContext(ctx context.Context) ApiProfileResponseOutput {
	return o
}

func (o ApiProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ApiProfileResponse] {
	return pulumix.Output[ApiProfileResponse]{
		OutputState: o.OutputState,
	}
}

// The API version.
func (o ApiProfileResponseOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ApiProfileResponse) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// The profile version.
func (o ApiProfileResponseOutput) ProfileVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ApiProfileResponse) string { return v.ProfileVersion }).(pulumi.StringOutput)
}

type ApiProfileResponseArrayOutput struct{ *pulumi.OutputState }

func (ApiProfileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiProfileResponse)(nil)).Elem()
}

func (o ApiProfileResponseArrayOutput) ToApiProfileResponseArrayOutput() ApiProfileResponseArrayOutput {
	return o
}

func (o ApiProfileResponseArrayOutput) ToApiProfileResponseArrayOutputWithContext(ctx context.Context) ApiProfileResponseArrayOutput {
	return o
}

func (o ApiProfileResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ApiProfileResponse] {
	return pulumix.Output[[]ApiProfileResponse]{
		OutputState: o.OutputState,
	}
}

func (o ApiProfileResponseArrayOutput) Index(i pulumi.IntInput) ApiProfileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiProfileResponse {
		return vs[0].([]ApiProfileResponse)[vs[1].(int)]
	}).(ApiProfileResponseOutput)
}

// Deployment dependency information.
type BasicDependencyResponse struct {
	// The ID of the dependency.
	Id *string `pulumi:"id"`
	// The dependency resource name.
	ResourceName *string `pulumi:"resourceName"`
	// The dependency resource type.
	ResourceType *string `pulumi:"resourceType"`
}

// Deployment dependency information.
type BasicDependencyResponseOutput struct{ *pulumi.OutputState }

func (BasicDependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicDependencyResponse)(nil)).Elem()
}

func (o BasicDependencyResponseOutput) ToBasicDependencyResponseOutput() BasicDependencyResponseOutput {
	return o
}

func (o BasicDependencyResponseOutput) ToBasicDependencyResponseOutputWithContext(ctx context.Context) BasicDependencyResponseOutput {
	return o
}

func (o BasicDependencyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BasicDependencyResponse] {
	return pulumix.Output[BasicDependencyResponse]{
		OutputState: o.OutputState,
	}
}

// The ID of the dependency.
func (o BasicDependencyResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicDependencyResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The dependency resource name.
func (o BasicDependencyResponseOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicDependencyResponse) *string { return v.ResourceName }).(pulumi.StringPtrOutput)
}

// The dependency resource type.
func (o BasicDependencyResponseOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicDependencyResponse) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

type BasicDependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (BasicDependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BasicDependencyResponse)(nil)).Elem()
}

func (o BasicDependencyResponseArrayOutput) ToBasicDependencyResponseArrayOutput() BasicDependencyResponseArrayOutput {
	return o
}

func (o BasicDependencyResponseArrayOutput) ToBasicDependencyResponseArrayOutputWithContext(ctx context.Context) BasicDependencyResponseArrayOutput {
	return o
}

func (o BasicDependencyResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BasicDependencyResponse] {
	return pulumix.Output[[]BasicDependencyResponse]{
		OutputState: o.OutputState,
	}
}

func (o BasicDependencyResponseArrayOutput) Index(i pulumi.IntInput) BasicDependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BasicDependencyResponse {
		return vs[0].([]BasicDependencyResponse)[vs[1].(int)]
	}).(BasicDependencyResponseOutput)
}

// Settings to customize ACI container instance.
type ContainerConfiguration struct {
	// Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed. To specify a 'containerGroupName', add the following object to properties: { "containerSettings": { "containerGroupName": "contoso-container" } }. If you do not want to specify a 'containerGroupName' then do not add 'containerSettings' property.
	ContainerGroupName *string `pulumi:"containerGroupName"`
}

// ContainerConfigurationInput is an input type that accepts ContainerConfigurationArgs and ContainerConfigurationOutput values.
// You can construct a concrete instance of `ContainerConfigurationInput` via:
//
//	ContainerConfigurationArgs{...}
type ContainerConfigurationInput interface {
	pulumi.Input

	ToContainerConfigurationOutput() ContainerConfigurationOutput
	ToContainerConfigurationOutputWithContext(context.Context) ContainerConfigurationOutput
}

// Settings to customize ACI container instance.
type ContainerConfigurationArgs struct {
	// Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed. To specify a 'containerGroupName', add the following object to properties: { "containerSettings": { "containerGroupName": "contoso-container" } }. If you do not want to specify a 'containerGroupName' then do not add 'containerSettings' property.
	ContainerGroupName pulumi.StringPtrInput `pulumi:"containerGroupName"`
}

func (ContainerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerConfiguration)(nil)).Elem()
}

func (i ContainerConfigurationArgs) ToContainerConfigurationOutput() ContainerConfigurationOutput {
	return i.ToContainerConfigurationOutputWithContext(context.Background())
}

func (i ContainerConfigurationArgs) ToContainerConfigurationOutputWithContext(ctx context.Context) ContainerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerConfigurationOutput)
}

func (i ContainerConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerConfiguration] {
	return pulumix.Output[ContainerConfiguration]{
		OutputState: i.ToContainerConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerConfigurationArgs) ToContainerConfigurationPtrOutput() ContainerConfigurationPtrOutput {
	return i.ToContainerConfigurationPtrOutputWithContext(context.Background())
}

func (i ContainerConfigurationArgs) ToContainerConfigurationPtrOutputWithContext(ctx context.Context) ContainerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerConfigurationOutput).ToContainerConfigurationPtrOutputWithContext(ctx)
}

// ContainerConfigurationPtrInput is an input type that accepts ContainerConfigurationArgs, ContainerConfigurationPtr and ContainerConfigurationPtrOutput values.
// You can construct a concrete instance of `ContainerConfigurationPtrInput` via:
//
//	        ContainerConfigurationArgs{...}
//
//	or:
//
//	        nil
type ContainerConfigurationPtrInput interface {
	pulumi.Input

	ToContainerConfigurationPtrOutput() ContainerConfigurationPtrOutput
	ToContainerConfigurationPtrOutputWithContext(context.Context) ContainerConfigurationPtrOutput
}

type containerConfigurationPtrType ContainerConfigurationArgs

func ContainerConfigurationPtr(v *ContainerConfigurationArgs) ContainerConfigurationPtrInput {
	return (*containerConfigurationPtrType)(v)
}

func (*containerConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerConfiguration)(nil)).Elem()
}

func (i *containerConfigurationPtrType) ToContainerConfigurationPtrOutput() ContainerConfigurationPtrOutput {
	return i.ToContainerConfigurationPtrOutputWithContext(context.Background())
}

func (i *containerConfigurationPtrType) ToContainerConfigurationPtrOutputWithContext(ctx context.Context) ContainerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerConfigurationPtrOutput)
}

func (i *containerConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerConfiguration] {
	return pulumix.Output[*ContainerConfiguration]{
		OutputState: i.ToContainerConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Settings to customize ACI container instance.
type ContainerConfigurationOutput struct{ *pulumi.OutputState }

func (ContainerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerConfiguration)(nil)).Elem()
}

func (o ContainerConfigurationOutput) ToContainerConfigurationOutput() ContainerConfigurationOutput {
	return o
}

func (o ContainerConfigurationOutput) ToContainerConfigurationOutputWithContext(ctx context.Context) ContainerConfigurationOutput {
	return o
}

func (o ContainerConfigurationOutput) ToContainerConfigurationPtrOutput() ContainerConfigurationPtrOutput {
	return o.ToContainerConfigurationPtrOutputWithContext(context.Background())
}

func (o ContainerConfigurationOutput) ToContainerConfigurationPtrOutputWithContext(ctx context.Context) ContainerConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerConfiguration) *ContainerConfiguration {
		return &v
	}).(ContainerConfigurationPtrOutput)
}

func (o ContainerConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerConfiguration] {
	return pulumix.Output[ContainerConfiguration]{
		OutputState: o.OutputState,
	}
}

// Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed. To specify a 'containerGroupName', add the following object to properties: { "containerSettings": { "containerGroupName": "contoso-container" } }. If you do not want to specify a 'containerGroupName' then do not add 'containerSettings' property.
func (o ContainerConfigurationOutput) ContainerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerConfiguration) *string { return v.ContainerGroupName }).(pulumi.StringPtrOutput)
}

type ContainerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ContainerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerConfiguration)(nil)).Elem()
}

func (o ContainerConfigurationPtrOutput) ToContainerConfigurationPtrOutput() ContainerConfigurationPtrOutput {
	return o
}

func (o ContainerConfigurationPtrOutput) ToContainerConfigurationPtrOutputWithContext(ctx context.Context) ContainerConfigurationPtrOutput {
	return o
}

func (o ContainerConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerConfiguration] {
	return pulumix.Output[*ContainerConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ContainerConfigurationPtrOutput) Elem() ContainerConfigurationOutput {
	return o.ApplyT(func(v *ContainerConfiguration) ContainerConfiguration {
		if v != nil {
			return *v
		}
		var ret ContainerConfiguration
		return ret
	}).(ContainerConfigurationOutput)
}

// Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed. To specify a 'containerGroupName', add the following object to properties: { "containerSettings": { "containerGroupName": "contoso-container" } }. If you do not want to specify a 'containerGroupName' then do not add 'containerSettings' property.
func (o ContainerConfigurationPtrOutput) ContainerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ContainerGroupName
	}).(pulumi.StringPtrOutput)
}

// Settings to customize ACI container instance.
type ContainerConfigurationResponse struct {
	// Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed. To specify a 'containerGroupName', add the following object to properties: { "containerSettings": { "containerGroupName": "contoso-container" } }. If you do not want to specify a 'containerGroupName' then do not add 'containerSettings' property.
	ContainerGroupName *string `pulumi:"containerGroupName"`
}

// Settings to customize ACI container instance.
type ContainerConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ContainerConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerConfigurationResponse)(nil)).Elem()
}

func (o ContainerConfigurationResponseOutput) ToContainerConfigurationResponseOutput() ContainerConfigurationResponseOutput {
	return o
}

func (o ContainerConfigurationResponseOutput) ToContainerConfigurationResponseOutputWithContext(ctx context.Context) ContainerConfigurationResponseOutput {
	return o
}

func (o ContainerConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerConfigurationResponse] {
	return pulumix.Output[ContainerConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed. To specify a 'containerGroupName', add the following object to properties: { "containerSettings": { "containerGroupName": "contoso-container" } }. If you do not want to specify a 'containerGroupName' then do not add 'containerSettings' property.
func (o ContainerConfigurationResponseOutput) ContainerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerConfigurationResponse) *string { return v.ContainerGroupName }).(pulumi.StringPtrOutput)
}

type ContainerConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerConfigurationResponse)(nil)).Elem()
}

func (o ContainerConfigurationResponsePtrOutput) ToContainerConfigurationResponsePtrOutput() ContainerConfigurationResponsePtrOutput {
	return o
}

func (o ContainerConfigurationResponsePtrOutput) ToContainerConfigurationResponsePtrOutputWithContext(ctx context.Context) ContainerConfigurationResponsePtrOutput {
	return o
}

func (o ContainerConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerConfigurationResponse] {
	return pulumix.Output[*ContainerConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerConfigurationResponsePtrOutput) Elem() ContainerConfigurationResponseOutput {
	return o.ApplyT(func(v *ContainerConfigurationResponse) ContainerConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ContainerConfigurationResponse
		return ret
	}).(ContainerConfigurationResponseOutput)
}

// Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed. To specify a 'containerGroupName', add the following object to properties: { "containerSettings": { "containerGroupName": "contoso-container" } }. If you do not want to specify a 'containerGroupName' then do not add 'containerSettings' property.
func (o ContainerConfigurationResponsePtrOutput) ContainerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContainerGroupName
	}).(pulumi.StringPtrOutput)
}

// The debug setting.
type DebugSetting struct {
	// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
	DetailLevel *string `pulumi:"detailLevel"`
}

// DebugSettingInput is an input type that accepts DebugSettingArgs and DebugSettingOutput values.
// You can construct a concrete instance of `DebugSettingInput` via:
//
//	DebugSettingArgs{...}
type DebugSettingInput interface {
	pulumi.Input

	ToDebugSettingOutput() DebugSettingOutput
	ToDebugSettingOutputWithContext(context.Context) DebugSettingOutput
}

// The debug setting.
type DebugSettingArgs struct {
	// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
	DetailLevel pulumi.StringPtrInput `pulumi:"detailLevel"`
}

func (DebugSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DebugSetting)(nil)).Elem()
}

func (i DebugSettingArgs) ToDebugSettingOutput() DebugSettingOutput {
	return i.ToDebugSettingOutputWithContext(context.Background())
}

func (i DebugSettingArgs) ToDebugSettingOutputWithContext(ctx context.Context) DebugSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DebugSettingOutput)
}

func (i DebugSettingArgs) ToOutput(ctx context.Context) pulumix.Output[DebugSetting] {
	return pulumix.Output[DebugSetting]{
		OutputState: i.ToDebugSettingOutputWithContext(ctx).OutputState,
	}
}

func (i DebugSettingArgs) ToDebugSettingPtrOutput() DebugSettingPtrOutput {
	return i.ToDebugSettingPtrOutputWithContext(context.Background())
}

func (i DebugSettingArgs) ToDebugSettingPtrOutputWithContext(ctx context.Context) DebugSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DebugSettingOutput).ToDebugSettingPtrOutputWithContext(ctx)
}

// DebugSettingPtrInput is an input type that accepts DebugSettingArgs, DebugSettingPtr and DebugSettingPtrOutput values.
// You can construct a concrete instance of `DebugSettingPtrInput` via:
//
//	        DebugSettingArgs{...}
//
//	or:
//
//	        nil
type DebugSettingPtrInput interface {
	pulumi.Input

	ToDebugSettingPtrOutput() DebugSettingPtrOutput
	ToDebugSettingPtrOutputWithContext(context.Context) DebugSettingPtrOutput
}

type debugSettingPtrType DebugSettingArgs

func DebugSettingPtr(v *DebugSettingArgs) DebugSettingPtrInput {
	return (*debugSettingPtrType)(v)
}

func (*debugSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DebugSetting)(nil)).Elem()
}

func (i *debugSettingPtrType) ToDebugSettingPtrOutput() DebugSettingPtrOutput {
	return i.ToDebugSettingPtrOutputWithContext(context.Background())
}

func (i *debugSettingPtrType) ToDebugSettingPtrOutputWithContext(ctx context.Context) DebugSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DebugSettingPtrOutput)
}

func (i *debugSettingPtrType) ToOutput(ctx context.Context) pulumix.Output[*DebugSetting] {
	return pulumix.Output[*DebugSetting]{
		OutputState: i.ToDebugSettingPtrOutputWithContext(ctx).OutputState,
	}
}

// The debug setting.
type DebugSettingOutput struct{ *pulumi.OutputState }

func (DebugSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DebugSetting)(nil)).Elem()
}

func (o DebugSettingOutput) ToDebugSettingOutput() DebugSettingOutput {
	return o
}

func (o DebugSettingOutput) ToDebugSettingOutputWithContext(ctx context.Context) DebugSettingOutput {
	return o
}

func (o DebugSettingOutput) ToDebugSettingPtrOutput() DebugSettingPtrOutput {
	return o.ToDebugSettingPtrOutputWithContext(context.Background())
}

func (o DebugSettingOutput) ToDebugSettingPtrOutputWithContext(ctx context.Context) DebugSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DebugSetting) *DebugSetting {
		return &v
	}).(DebugSettingPtrOutput)
}

func (o DebugSettingOutput) ToOutput(ctx context.Context) pulumix.Output[DebugSetting] {
	return pulumix.Output[DebugSetting]{
		OutputState: o.OutputState,
	}
}

// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
func (o DebugSettingOutput) DetailLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DebugSetting) *string { return v.DetailLevel }).(pulumi.StringPtrOutput)
}

type DebugSettingPtrOutput struct{ *pulumi.OutputState }

func (DebugSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DebugSetting)(nil)).Elem()
}

func (o DebugSettingPtrOutput) ToDebugSettingPtrOutput() DebugSettingPtrOutput {
	return o
}

func (o DebugSettingPtrOutput) ToDebugSettingPtrOutputWithContext(ctx context.Context) DebugSettingPtrOutput {
	return o
}

func (o DebugSettingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DebugSetting] {
	return pulumix.Output[*DebugSetting]{
		OutputState: o.OutputState,
	}
}

func (o DebugSettingPtrOutput) Elem() DebugSettingOutput {
	return o.ApplyT(func(v *DebugSetting) DebugSetting {
		if v != nil {
			return *v
		}
		var ret DebugSetting
		return ret
	}).(DebugSettingOutput)
}

// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
func (o DebugSettingPtrOutput) DetailLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DebugSetting) *string {
		if v == nil {
			return nil
		}
		return v.DetailLevel
	}).(pulumi.StringPtrOutput)
}

// The debug setting.
type DebugSettingResponse struct {
	// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
	DetailLevel *string `pulumi:"detailLevel"`
}

// The debug setting.
type DebugSettingResponseOutput struct{ *pulumi.OutputState }

func (DebugSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DebugSettingResponse)(nil)).Elem()
}

func (o DebugSettingResponseOutput) ToDebugSettingResponseOutput() DebugSettingResponseOutput {
	return o
}

func (o DebugSettingResponseOutput) ToDebugSettingResponseOutputWithContext(ctx context.Context) DebugSettingResponseOutput {
	return o
}

func (o DebugSettingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DebugSettingResponse] {
	return pulumix.Output[DebugSettingResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
func (o DebugSettingResponseOutput) DetailLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DebugSettingResponse) *string { return v.DetailLevel }).(pulumi.StringPtrOutput)
}

// Defines how resources deployed by the deployment stack are locked.
type DenySettings struct {
	// DenySettings will be applied to child scopes.
	ApplyToChildScopes *bool `pulumi:"applyToChildScopes"`
	// List of role-based management operations that are excluded from the denySettings. Up to 200 actions are permitted. If the denySetting mode is set to 'denyWriteAndDelete', then the following actions are automatically appended to 'excludedActions': '*/read' and 'Microsoft.Authorization/locks/delete'. If the denySetting mode is set to 'denyDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will be removed.
	ExcludedActions []string `pulumi:"excludedActions"`
	// List of AAD principal IDs excluded from the lock. Up to 5 principals are permitted.
	ExcludedPrincipals []string `pulumi:"excludedPrincipals"`
	// denySettings Mode.
	Mode string `pulumi:"mode"`
}

// DenySettingsInput is an input type that accepts DenySettingsArgs and DenySettingsOutput values.
// You can construct a concrete instance of `DenySettingsInput` via:
//
//	DenySettingsArgs{...}
type DenySettingsInput interface {
	pulumi.Input

	ToDenySettingsOutput() DenySettingsOutput
	ToDenySettingsOutputWithContext(context.Context) DenySettingsOutput
}

// Defines how resources deployed by the deployment stack are locked.
type DenySettingsArgs struct {
	// DenySettings will be applied to child scopes.
	ApplyToChildScopes pulumi.BoolPtrInput `pulumi:"applyToChildScopes"`
	// List of role-based management operations that are excluded from the denySettings. Up to 200 actions are permitted. If the denySetting mode is set to 'denyWriteAndDelete', then the following actions are automatically appended to 'excludedActions': '*/read' and 'Microsoft.Authorization/locks/delete'. If the denySetting mode is set to 'denyDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will be removed.
	ExcludedActions pulumi.StringArrayInput `pulumi:"excludedActions"`
	// List of AAD principal IDs excluded from the lock. Up to 5 principals are permitted.
	ExcludedPrincipals pulumi.StringArrayInput `pulumi:"excludedPrincipals"`
	// denySettings Mode.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (DenySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DenySettings)(nil)).Elem()
}

func (i DenySettingsArgs) ToDenySettingsOutput() DenySettingsOutput {
	return i.ToDenySettingsOutputWithContext(context.Background())
}

func (i DenySettingsArgs) ToDenySettingsOutputWithContext(ctx context.Context) DenySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenySettingsOutput)
}

func (i DenySettingsArgs) ToOutput(ctx context.Context) pulumix.Output[DenySettings] {
	return pulumix.Output[DenySettings]{
		OutputState: i.ToDenySettingsOutputWithContext(ctx).OutputState,
	}
}

// Defines how resources deployed by the deployment stack are locked.
type DenySettingsOutput struct{ *pulumi.OutputState }

func (DenySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DenySettings)(nil)).Elem()
}

func (o DenySettingsOutput) ToDenySettingsOutput() DenySettingsOutput {
	return o
}

func (o DenySettingsOutput) ToDenySettingsOutputWithContext(ctx context.Context) DenySettingsOutput {
	return o
}

func (o DenySettingsOutput) ToOutput(ctx context.Context) pulumix.Output[DenySettings] {
	return pulumix.Output[DenySettings]{
		OutputState: o.OutputState,
	}
}

// DenySettings will be applied to child scopes.
func (o DenySettingsOutput) ApplyToChildScopes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DenySettings) *bool { return v.ApplyToChildScopes }).(pulumi.BoolPtrOutput)
}

// List of role-based management operations that are excluded from the denySettings. Up to 200 actions are permitted. If the denySetting mode is set to 'denyWriteAndDelete', then the following actions are automatically appended to 'excludedActions': '*/read' and 'Microsoft.Authorization/locks/delete'. If the denySetting mode is set to 'denyDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will be removed.
func (o DenySettingsOutput) ExcludedActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DenySettings) []string { return v.ExcludedActions }).(pulumi.StringArrayOutput)
}

// List of AAD principal IDs excluded from the lock. Up to 5 principals are permitted.
func (o DenySettingsOutput) ExcludedPrincipals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DenySettings) []string { return v.ExcludedPrincipals }).(pulumi.StringArrayOutput)
}

// denySettings Mode.
func (o DenySettingsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v DenySettings) string { return v.Mode }).(pulumi.StringOutput)
}

// Defines how resources deployed by the deployment stack are locked.
type DenySettingsResponse struct {
	// DenySettings will be applied to child scopes.
	ApplyToChildScopes *bool `pulumi:"applyToChildScopes"`
	// List of role-based management operations that are excluded from the denySettings. Up to 200 actions are permitted. If the denySetting mode is set to 'denyWriteAndDelete', then the following actions are automatically appended to 'excludedActions': '*/read' and 'Microsoft.Authorization/locks/delete'. If the denySetting mode is set to 'denyDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will be removed.
	ExcludedActions []string `pulumi:"excludedActions"`
	// List of AAD principal IDs excluded from the lock. Up to 5 principals are permitted.
	ExcludedPrincipals []string `pulumi:"excludedPrincipals"`
	// denySettings Mode.
	Mode string `pulumi:"mode"`
}

// Defines how resources deployed by the deployment stack are locked.
type DenySettingsResponseOutput struct{ *pulumi.OutputState }

func (DenySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DenySettingsResponse)(nil)).Elem()
}

func (o DenySettingsResponseOutput) ToDenySettingsResponseOutput() DenySettingsResponseOutput {
	return o
}

func (o DenySettingsResponseOutput) ToDenySettingsResponseOutputWithContext(ctx context.Context) DenySettingsResponseOutput {
	return o
}

func (o DenySettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DenySettingsResponse] {
	return pulumix.Output[DenySettingsResponse]{
		OutputState: o.OutputState,
	}
}

// DenySettings will be applied to child scopes.
func (o DenySettingsResponseOutput) ApplyToChildScopes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DenySettingsResponse) *bool { return v.ApplyToChildScopes }).(pulumi.BoolPtrOutput)
}

// List of role-based management operations that are excluded from the denySettings. Up to 200 actions are permitted. If the denySetting mode is set to 'denyWriteAndDelete', then the following actions are automatically appended to 'excludedActions': '*/read' and 'Microsoft.Authorization/locks/delete'. If the denySetting mode is set to 'denyDelete', then the following actions are automatically appended to 'excludedActions': 'Microsoft.Authorization/locks/delete'. Duplicate actions will be removed.
func (o DenySettingsResponseOutput) ExcludedActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DenySettingsResponse) []string { return v.ExcludedActions }).(pulumi.StringArrayOutput)
}

// List of AAD principal IDs excluded from the lock. Up to 5 principals are permitted.
func (o DenySettingsResponseOutput) ExcludedPrincipals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DenySettingsResponse) []string { return v.ExcludedPrincipals }).(pulumi.StringArrayOutput)
}

// denySettings Mode.
func (o DenySettingsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v DenySettingsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Deployment dependency information.
type DependencyResponse struct {
	// The list of dependencies.
	DependsOn []BasicDependencyResponse `pulumi:"dependsOn"`
	// The ID of the dependency.
	Id *string `pulumi:"id"`
	// The dependency resource name.
	ResourceName *string `pulumi:"resourceName"`
	// The dependency resource type.
	ResourceType *string `pulumi:"resourceType"`
}

// Deployment dependency information.
type DependencyResponseOutput struct{ *pulumi.OutputState }

func (DependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DependencyResponse)(nil)).Elem()
}

func (o DependencyResponseOutput) ToDependencyResponseOutput() DependencyResponseOutput {
	return o
}

func (o DependencyResponseOutput) ToDependencyResponseOutputWithContext(ctx context.Context) DependencyResponseOutput {
	return o
}

func (o DependencyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DependencyResponse] {
	return pulumix.Output[DependencyResponse]{
		OutputState: o.OutputState,
	}
}

// The list of dependencies.
func (o DependencyResponseOutput) DependsOn() BasicDependencyResponseArrayOutput {
	return o.ApplyT(func(v DependencyResponse) []BasicDependencyResponse { return v.DependsOn }).(BasicDependencyResponseArrayOutput)
}

// The ID of the dependency.
func (o DependencyResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DependencyResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The dependency resource name.
func (o DependencyResponseOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DependencyResponse) *string { return v.ResourceName }).(pulumi.StringPtrOutput)
}

// The dependency resource type.
func (o DependencyResponseOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DependencyResponse) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

type DependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (DependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DependencyResponse)(nil)).Elem()
}

func (o DependencyResponseArrayOutput) ToDependencyResponseArrayOutput() DependencyResponseArrayOutput {
	return o
}

func (o DependencyResponseArrayOutput) ToDependencyResponseArrayOutputWithContext(ctx context.Context) DependencyResponseArrayOutput {
	return o
}

func (o DependencyResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DependencyResponse] {
	return pulumix.Output[[]DependencyResponse]{
		OutputState: o.OutputState,
	}
}

func (o DependencyResponseArrayOutput) Index(i pulumi.IntInput) DependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DependencyResponse {
		return vs[0].([]DependencyResponse)[vs[1].(int)]
	}).(DependencyResponseOutput)
}

// Deployment parameter for the template.
type DeploymentParameter struct {
	// Azure Key Vault parameter reference.
	Reference *KeyVaultParameterReference `pulumi:"reference"`
	// Input value to the parameter .
	Value interface{} `pulumi:"value"`
}

// DeploymentParameterInput is an input type that accepts DeploymentParameterArgs and DeploymentParameterOutput values.
// You can construct a concrete instance of `DeploymentParameterInput` via:
//
//	DeploymentParameterArgs{...}
type DeploymentParameterInput interface {
	pulumi.Input

	ToDeploymentParameterOutput() DeploymentParameterOutput
	ToDeploymentParameterOutputWithContext(context.Context) DeploymentParameterOutput
}

// Deployment parameter for the template.
type DeploymentParameterArgs struct {
	// Azure Key Vault parameter reference.
	Reference KeyVaultParameterReferencePtrInput `pulumi:"reference"`
	// Input value to the parameter .
	Value pulumi.Input `pulumi:"value"`
}

func (DeploymentParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentParameter)(nil)).Elem()
}

func (i DeploymentParameterArgs) ToDeploymentParameterOutput() DeploymentParameterOutput {
	return i.ToDeploymentParameterOutputWithContext(context.Background())
}

func (i DeploymentParameterArgs) ToDeploymentParameterOutputWithContext(ctx context.Context) DeploymentParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentParameterOutput)
}

func (i DeploymentParameterArgs) ToOutput(ctx context.Context) pulumix.Output[DeploymentParameter] {
	return pulumix.Output[DeploymentParameter]{
		OutputState: i.ToDeploymentParameterOutputWithContext(ctx).OutputState,
	}
}

// DeploymentParameterMapInput is an input type that accepts DeploymentParameterMap and DeploymentParameterMapOutput values.
// You can construct a concrete instance of `DeploymentParameterMapInput` via:
//
//	DeploymentParameterMap{ "key": DeploymentParameterArgs{...} }
type DeploymentParameterMapInput interface {
	pulumi.Input

	ToDeploymentParameterMapOutput() DeploymentParameterMapOutput
	ToDeploymentParameterMapOutputWithContext(context.Context) DeploymentParameterMapOutput
}

type DeploymentParameterMap map[string]DeploymentParameterInput

func (DeploymentParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeploymentParameter)(nil)).Elem()
}

func (i DeploymentParameterMap) ToDeploymentParameterMapOutput() DeploymentParameterMapOutput {
	return i.ToDeploymentParameterMapOutputWithContext(context.Background())
}

func (i DeploymentParameterMap) ToDeploymentParameterMapOutputWithContext(ctx context.Context) DeploymentParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentParameterMapOutput)
}

func (i DeploymentParameterMap) ToOutput(ctx context.Context) pulumix.Output[map[string]DeploymentParameter] {
	return pulumix.Output[map[string]DeploymentParameter]{
		OutputState: i.ToDeploymentParameterMapOutputWithContext(ctx).OutputState,
	}
}

// Deployment parameter for the template.
type DeploymentParameterOutput struct{ *pulumi.OutputState }

func (DeploymentParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentParameter)(nil)).Elem()
}

func (o DeploymentParameterOutput) ToDeploymentParameterOutput() DeploymentParameterOutput {
	return o
}

func (o DeploymentParameterOutput) ToDeploymentParameterOutputWithContext(ctx context.Context) DeploymentParameterOutput {
	return o
}

func (o DeploymentParameterOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentParameter] {
	return pulumix.Output[DeploymentParameter]{
		OutputState: o.OutputState,
	}
}

// Azure Key Vault parameter reference.
func (o DeploymentParameterOutput) Reference() KeyVaultParameterReferencePtrOutput {
	return o.ApplyT(func(v DeploymentParameter) *KeyVaultParameterReference { return v.Reference }).(KeyVaultParameterReferencePtrOutput)
}

// Input value to the parameter .
func (o DeploymentParameterOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentParameter) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type DeploymentParameterMapOutput struct{ *pulumi.OutputState }

func (DeploymentParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeploymentParameter)(nil)).Elem()
}

func (o DeploymentParameterMapOutput) ToDeploymentParameterMapOutput() DeploymentParameterMapOutput {
	return o
}

func (o DeploymentParameterMapOutput) ToDeploymentParameterMapOutputWithContext(ctx context.Context) DeploymentParameterMapOutput {
	return o
}

func (o DeploymentParameterMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]DeploymentParameter] {
	return pulumix.Output[map[string]DeploymentParameter]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentParameterMapOutput) MapIndex(k pulumi.StringInput) DeploymentParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeploymentParameter {
		return vs[0].(map[string]DeploymentParameter)[vs[1].(string)]
	}).(DeploymentParameterOutput)
}

// Deployment properties.
type DeploymentProperties struct {
	// The debug setting of the deployment.
	DebugSetting *DebugSetting `pulumi:"debugSetting"`
	// Specifies whether template expressions are evaluated within the scope of the parent template or nested template. Only applicable to nested templates. If not specified, default value is outer.
	ExpressionEvaluationOptions *ExpressionEvaluationOptions `pulumi:"expressionEvaluationOptions"`
	// The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
	Mode DeploymentMode `pulumi:"mode"`
	// The deployment on error behavior.
	OnErrorDeployment *OnErrorDeployment `pulumi:"onErrorDeployment"`
	// Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
	Parameters map[string]DeploymentParameter `pulumi:"parameters"`
	// The URI of parameters file. You use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
	ParametersLink *ParametersLink `pulumi:"parametersLink"`
	// The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
	Template interface{} `pulumi:"template"`
	// The URI of the template. Use either the templateLink property or the template property, but not both.
	TemplateLink *TemplateLink `pulumi:"templateLink"`
}

// DeploymentPropertiesInput is an input type that accepts DeploymentPropertiesArgs and DeploymentPropertiesOutput values.
// You can construct a concrete instance of `DeploymentPropertiesInput` via:
//
//	DeploymentPropertiesArgs{...}
type DeploymentPropertiesInput interface {
	pulumi.Input

	ToDeploymentPropertiesOutput() DeploymentPropertiesOutput
	ToDeploymentPropertiesOutputWithContext(context.Context) DeploymentPropertiesOutput
}

// Deployment properties.
type DeploymentPropertiesArgs struct {
	// The debug setting of the deployment.
	DebugSetting DebugSettingPtrInput `pulumi:"debugSetting"`
	// Specifies whether template expressions are evaluated within the scope of the parent template or nested template. Only applicable to nested templates. If not specified, default value is outer.
	ExpressionEvaluationOptions ExpressionEvaluationOptionsPtrInput `pulumi:"expressionEvaluationOptions"`
	// The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
	Mode DeploymentModeInput `pulumi:"mode"`
	// The deployment on error behavior.
	OnErrorDeployment OnErrorDeploymentPtrInput `pulumi:"onErrorDeployment"`
	// Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
	Parameters DeploymentParameterMapInput `pulumi:"parameters"`
	// The URI of parameters file. You use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
	ParametersLink ParametersLinkPtrInput `pulumi:"parametersLink"`
	// The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
	Template pulumi.Input `pulumi:"template"`
	// The URI of the template. Use either the templateLink property or the template property, but not both.
	TemplateLink TemplateLinkPtrInput `pulumi:"templateLink"`
}

func (DeploymentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentProperties)(nil)).Elem()
}

func (i DeploymentPropertiesArgs) ToDeploymentPropertiesOutput() DeploymentPropertiesOutput {
	return i.ToDeploymentPropertiesOutputWithContext(context.Background())
}

func (i DeploymentPropertiesArgs) ToDeploymentPropertiesOutputWithContext(ctx context.Context) DeploymentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentPropertiesOutput)
}

func (i DeploymentPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[DeploymentProperties] {
	return pulumix.Output[DeploymentProperties]{
		OutputState: i.ToDeploymentPropertiesOutputWithContext(ctx).OutputState,
	}
}

// Deployment properties.
type DeploymentPropertiesOutput struct{ *pulumi.OutputState }

func (DeploymentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentProperties)(nil)).Elem()
}

func (o DeploymentPropertiesOutput) ToDeploymentPropertiesOutput() DeploymentPropertiesOutput {
	return o
}

func (o DeploymentPropertiesOutput) ToDeploymentPropertiesOutputWithContext(ctx context.Context) DeploymentPropertiesOutput {
	return o
}

func (o DeploymentPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentProperties] {
	return pulumix.Output[DeploymentProperties]{
		OutputState: o.OutputState,
	}
}

// The debug setting of the deployment.
func (o DeploymentPropertiesOutput) DebugSetting() DebugSettingPtrOutput {
	return o.ApplyT(func(v DeploymentProperties) *DebugSetting { return v.DebugSetting }).(DebugSettingPtrOutput)
}

// Specifies whether template expressions are evaluated within the scope of the parent template or nested template. Only applicable to nested templates. If not specified, default value is outer.
func (o DeploymentPropertiesOutput) ExpressionEvaluationOptions() ExpressionEvaluationOptionsPtrOutput {
	return o.ApplyT(func(v DeploymentProperties) *ExpressionEvaluationOptions { return v.ExpressionEvaluationOptions }).(ExpressionEvaluationOptionsPtrOutput)
}

// The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting existing resources that are not included in the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted. Be careful when using Complete mode as you may unintentionally delete resources.
func (o DeploymentPropertiesOutput) Mode() DeploymentModeOutput {
	return o.ApplyT(func(v DeploymentProperties) DeploymentMode { return v.Mode }).(DeploymentModeOutput)
}

// The deployment on error behavior.
func (o DeploymentPropertiesOutput) OnErrorDeployment() OnErrorDeploymentPtrOutput {
	return o.ApplyT(func(v DeploymentProperties) *OnErrorDeployment { return v.OnErrorDeployment }).(OnErrorDeploymentPtrOutput)
}

// Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly in the request rather than link to an existing parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
func (o DeploymentPropertiesOutput) Parameters() DeploymentParameterMapOutput {
	return o.ApplyT(func(v DeploymentProperties) map[string]DeploymentParameter { return v.Parameters }).(DeploymentParameterMapOutput)
}

// The URI of parameters file. You use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
func (o DeploymentPropertiesOutput) ParametersLink() ParametersLinkPtrOutput {
	return o.ApplyT(func(v DeploymentProperties) *ParametersLink { return v.ParametersLink }).(ParametersLinkPtrOutput)
}

// The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
func (o DeploymentPropertiesOutput) Template() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentProperties) interface{} { return v.Template }).(pulumi.AnyOutput)
}

// The URI of the template. Use either the templateLink property or the template property, but not both.
func (o DeploymentPropertiesOutput) TemplateLink() TemplateLinkPtrOutput {
	return o.ApplyT(func(v DeploymentProperties) *TemplateLink { return v.TemplateLink }).(TemplateLinkPtrOutput)
}

// Deployment properties with additional details.
type DeploymentPropertiesExtendedResponse struct {
	// The correlation ID of the deployment.
	CorrelationId string `pulumi:"correlationId"`
	// The debug setting of the deployment.
	DebugSetting DebugSettingResponse `pulumi:"debugSetting"`
	// The list of deployment dependencies.
	Dependencies []DependencyResponse `pulumi:"dependencies"`
	// The duration of the template deployment.
	Duration string `pulumi:"duration"`
	// The deployment error.
	Error ErrorResponseResponse `pulumi:"error"`
	// The deployment mode. Possible values are Incremental and Complete.
	Mode string `pulumi:"mode"`
	// The deployment on error behavior.
	OnErrorDeployment OnErrorDeploymentExtendedResponse `pulumi:"onErrorDeployment"`
	// Array of provisioned resources.
	OutputResources []ResourceReferenceResponse `pulumi:"outputResources"`
	// Key/value pairs that represent deployment output.
	Outputs interface{} `pulumi:"outputs"`
	// Deployment parameters.
	Parameters interface{} `pulumi:"parameters"`
	// The URI referencing the parameters.
	ParametersLink ParametersLinkResponse `pulumi:"parametersLink"`
	// The list of resource providers needed for the deployment.
	Providers []ProviderResponse `pulumi:"providers"`
	// Denotes the state of provisioning.
	ProvisioningState string `pulumi:"provisioningState"`
	// The hash produced for the template.
	TemplateHash string `pulumi:"templateHash"`
	// The URI referencing the template.
	TemplateLink TemplateLinkResponse `pulumi:"templateLink"`
	// The timestamp of the template deployment.
	Timestamp string `pulumi:"timestamp"`
	// Array of validated resources.
	ValidatedResources []ResourceReferenceResponse `pulumi:"validatedResources"`
}

// Deployment properties with additional details.
type DeploymentPropertiesExtendedResponseOutput struct{ *pulumi.OutputState }

func (DeploymentPropertiesExtendedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentPropertiesExtendedResponse)(nil)).Elem()
}

func (o DeploymentPropertiesExtendedResponseOutput) ToDeploymentPropertiesExtendedResponseOutput() DeploymentPropertiesExtendedResponseOutput {
	return o
}

func (o DeploymentPropertiesExtendedResponseOutput) ToDeploymentPropertiesExtendedResponseOutputWithContext(ctx context.Context) DeploymentPropertiesExtendedResponseOutput {
	return o
}

func (o DeploymentPropertiesExtendedResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentPropertiesExtendedResponse] {
	return pulumix.Output[DeploymentPropertiesExtendedResponse]{
		OutputState: o.OutputState,
	}
}

// The correlation ID of the deployment.
func (o DeploymentPropertiesExtendedResponseOutput) CorrelationId() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) string { return v.CorrelationId }).(pulumi.StringOutput)
}

// The debug setting of the deployment.
func (o DeploymentPropertiesExtendedResponseOutput) DebugSetting() DebugSettingResponseOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) DebugSettingResponse { return v.DebugSetting }).(DebugSettingResponseOutput)
}

// The list of deployment dependencies.
func (o DeploymentPropertiesExtendedResponseOutput) Dependencies() DependencyResponseArrayOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) []DependencyResponse { return v.Dependencies }).(DependencyResponseArrayOutput)
}

// The duration of the template deployment.
func (o DeploymentPropertiesExtendedResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// The deployment error.
func (o DeploymentPropertiesExtendedResponseOutput) Error() ErrorResponseResponseOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) ErrorResponseResponse { return v.Error }).(ErrorResponseResponseOutput)
}

// The deployment mode. Possible values are Incremental and Complete.
func (o DeploymentPropertiesExtendedResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// The deployment on error behavior.
func (o DeploymentPropertiesExtendedResponseOutput) OnErrorDeployment() OnErrorDeploymentExtendedResponseOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) OnErrorDeploymentExtendedResponse {
		return v.OnErrorDeployment
	}).(OnErrorDeploymentExtendedResponseOutput)
}

// Array of provisioned resources.
func (o DeploymentPropertiesExtendedResponseOutput) OutputResources() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) []ResourceReferenceResponse { return v.OutputResources }).(ResourceReferenceResponseArrayOutput)
}

// Key/value pairs that represent deployment output.
func (o DeploymentPropertiesExtendedResponseOutput) Outputs() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) interface{} { return v.Outputs }).(pulumi.AnyOutput)
}

// Deployment parameters.
func (o DeploymentPropertiesExtendedResponseOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

// The URI referencing the parameters.
func (o DeploymentPropertiesExtendedResponseOutput) ParametersLink() ParametersLinkResponseOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) ParametersLinkResponse { return v.ParametersLink }).(ParametersLinkResponseOutput)
}

// The list of resource providers needed for the deployment.
func (o DeploymentPropertiesExtendedResponseOutput) Providers() ProviderResponseArrayOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) []ProviderResponse { return v.Providers }).(ProviderResponseArrayOutput)
}

// Denotes the state of provisioning.
func (o DeploymentPropertiesExtendedResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The hash produced for the template.
func (o DeploymentPropertiesExtendedResponseOutput) TemplateHash() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) string { return v.TemplateHash }).(pulumi.StringOutput)
}

// The URI referencing the template.
func (o DeploymentPropertiesExtendedResponseOutput) TemplateLink() TemplateLinkResponseOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) TemplateLinkResponse { return v.TemplateLink }).(TemplateLinkResponseOutput)
}

// The timestamp of the template deployment.
func (o DeploymentPropertiesExtendedResponseOutput) Timestamp() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) string { return v.Timestamp }).(pulumi.StringOutput)
}

// Array of validated resources.
func (o DeploymentPropertiesExtendedResponseOutput) ValidatedResources() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v DeploymentPropertiesExtendedResponse) []ResourceReferenceResponse { return v.ValidatedResources }).(ResourceReferenceResponseArrayOutput)
}

// Defines the behavior of resources that are not managed immediately after the stack is updated.
type DeploymentStackPropertiesActionOnUnmanage struct {
	// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
	ManagementGroups *string `pulumi:"managementGroups"`
	// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
	ResourceGroups *string `pulumi:"resourceGroups"`
	// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
	Resources string `pulumi:"resources"`
}

// DeploymentStackPropertiesActionOnUnmanageInput is an input type that accepts DeploymentStackPropertiesActionOnUnmanageArgs and DeploymentStackPropertiesActionOnUnmanageOutput values.
// You can construct a concrete instance of `DeploymentStackPropertiesActionOnUnmanageInput` via:
//
//	DeploymentStackPropertiesActionOnUnmanageArgs{...}
type DeploymentStackPropertiesActionOnUnmanageInput interface {
	pulumi.Input

	ToDeploymentStackPropertiesActionOnUnmanageOutput() DeploymentStackPropertiesActionOnUnmanageOutput
	ToDeploymentStackPropertiesActionOnUnmanageOutputWithContext(context.Context) DeploymentStackPropertiesActionOnUnmanageOutput
}

// Defines the behavior of resources that are not managed immediately after the stack is updated.
type DeploymentStackPropertiesActionOnUnmanageArgs struct {
	// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
	ManagementGroups pulumi.StringPtrInput `pulumi:"managementGroups"`
	// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
	ResourceGroups pulumi.StringPtrInput `pulumi:"resourceGroups"`
	// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
	Resources pulumi.StringInput `pulumi:"resources"`
}

func (DeploymentStackPropertiesActionOnUnmanageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStackPropertiesActionOnUnmanage)(nil)).Elem()
}

func (i DeploymentStackPropertiesActionOnUnmanageArgs) ToDeploymentStackPropertiesActionOnUnmanageOutput() DeploymentStackPropertiesActionOnUnmanageOutput {
	return i.ToDeploymentStackPropertiesActionOnUnmanageOutputWithContext(context.Background())
}

func (i DeploymentStackPropertiesActionOnUnmanageArgs) ToDeploymentStackPropertiesActionOnUnmanageOutputWithContext(ctx context.Context) DeploymentStackPropertiesActionOnUnmanageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStackPropertiesActionOnUnmanageOutput)
}

func (i DeploymentStackPropertiesActionOnUnmanageArgs) ToOutput(ctx context.Context) pulumix.Output[DeploymentStackPropertiesActionOnUnmanage] {
	return pulumix.Output[DeploymentStackPropertiesActionOnUnmanage]{
		OutputState: i.ToDeploymentStackPropertiesActionOnUnmanageOutputWithContext(ctx).OutputState,
	}
}

// Defines the behavior of resources that are not managed immediately after the stack is updated.
type DeploymentStackPropertiesActionOnUnmanageOutput struct{ *pulumi.OutputState }

func (DeploymentStackPropertiesActionOnUnmanageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStackPropertiesActionOnUnmanage)(nil)).Elem()
}

func (o DeploymentStackPropertiesActionOnUnmanageOutput) ToDeploymentStackPropertiesActionOnUnmanageOutput() DeploymentStackPropertiesActionOnUnmanageOutput {
	return o
}

func (o DeploymentStackPropertiesActionOnUnmanageOutput) ToDeploymentStackPropertiesActionOnUnmanageOutputWithContext(ctx context.Context) DeploymentStackPropertiesActionOnUnmanageOutput {
	return o
}

func (o DeploymentStackPropertiesActionOnUnmanageOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentStackPropertiesActionOnUnmanage] {
	return pulumix.Output[DeploymentStackPropertiesActionOnUnmanage]{
		OutputState: o.OutputState,
	}
}

// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
func (o DeploymentStackPropertiesActionOnUnmanageOutput) ManagementGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStackPropertiesActionOnUnmanage) *string { return v.ManagementGroups }).(pulumi.StringPtrOutput)
}

// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
func (o DeploymentStackPropertiesActionOnUnmanageOutput) ResourceGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStackPropertiesActionOnUnmanage) *string { return v.ResourceGroups }).(pulumi.StringPtrOutput)
}

// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
func (o DeploymentStackPropertiesActionOnUnmanageOutput) Resources() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentStackPropertiesActionOnUnmanage) string { return v.Resources }).(pulumi.StringOutput)
}

// Defines the behavior of resources that are not managed immediately after the stack is updated.
type DeploymentStackPropertiesResponseActionOnUnmanage struct {
	// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
	ManagementGroups *string `pulumi:"managementGroups"`
	// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
	ResourceGroups *string `pulumi:"resourceGroups"`
	// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
	Resources string `pulumi:"resources"`
}

// Defines the behavior of resources that are not managed immediately after the stack is updated.
type DeploymentStackPropertiesResponseActionOnUnmanageOutput struct{ *pulumi.OutputState }

func (DeploymentStackPropertiesResponseActionOnUnmanageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStackPropertiesResponseActionOnUnmanage)(nil)).Elem()
}

func (o DeploymentStackPropertiesResponseActionOnUnmanageOutput) ToDeploymentStackPropertiesResponseActionOnUnmanageOutput() DeploymentStackPropertiesResponseActionOnUnmanageOutput {
	return o
}

func (o DeploymentStackPropertiesResponseActionOnUnmanageOutput) ToDeploymentStackPropertiesResponseActionOnUnmanageOutputWithContext(ctx context.Context) DeploymentStackPropertiesResponseActionOnUnmanageOutput {
	return o
}

func (o DeploymentStackPropertiesResponseActionOnUnmanageOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentStackPropertiesResponseActionOnUnmanage] {
	return pulumix.Output[DeploymentStackPropertiesResponseActionOnUnmanage]{
		OutputState: o.OutputState,
	}
}

// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
func (o DeploymentStackPropertiesResponseActionOnUnmanageOutput) ManagementGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStackPropertiesResponseActionOnUnmanage) *string { return v.ManagementGroups }).(pulumi.StringPtrOutput)
}

// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
func (o DeploymentStackPropertiesResponseActionOnUnmanageOutput) ResourceGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStackPropertiesResponseActionOnUnmanage) *string { return v.ResourceGroups }).(pulumi.StringPtrOutput)
}

// Specifies the action that should be taken on the resource when the deployment stack is deleted. Delete will attempt to delete the resource from Azure. Detach will leave the resource in it's current state.
func (o DeploymentStackPropertiesResponseActionOnUnmanageOutput) Resources() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentStackPropertiesResponseActionOnUnmanage) string { return v.Resources }).(pulumi.StringOutput)
}

// The debug setting.
type DeploymentStacksDebugSetting struct {
	// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information that is being passed in during deployment. By logging information about the request or response, sensitive data that is retrieved through the deployment operations could potentially be exposed.
	DetailLevel *string `pulumi:"detailLevel"`
}

// DeploymentStacksDebugSettingInput is an input type that accepts DeploymentStacksDebugSettingArgs and DeploymentStacksDebugSettingOutput values.
// You can construct a concrete instance of `DeploymentStacksDebugSettingInput` via:
//
//	DeploymentStacksDebugSettingArgs{...}
type DeploymentStacksDebugSettingInput interface {
	pulumi.Input

	ToDeploymentStacksDebugSettingOutput() DeploymentStacksDebugSettingOutput
	ToDeploymentStacksDebugSettingOutputWithContext(context.Context) DeploymentStacksDebugSettingOutput
}

// The debug setting.
type DeploymentStacksDebugSettingArgs struct {
	// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information that is being passed in during deployment. By logging information about the request or response, sensitive data that is retrieved through the deployment operations could potentially be exposed.
	DetailLevel pulumi.StringPtrInput `pulumi:"detailLevel"`
}

func (DeploymentStacksDebugSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStacksDebugSetting)(nil)).Elem()
}

func (i DeploymentStacksDebugSettingArgs) ToDeploymentStacksDebugSettingOutput() DeploymentStacksDebugSettingOutput {
	return i.ToDeploymentStacksDebugSettingOutputWithContext(context.Background())
}

func (i DeploymentStacksDebugSettingArgs) ToDeploymentStacksDebugSettingOutputWithContext(ctx context.Context) DeploymentStacksDebugSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStacksDebugSettingOutput)
}

func (i DeploymentStacksDebugSettingArgs) ToOutput(ctx context.Context) pulumix.Output[DeploymentStacksDebugSetting] {
	return pulumix.Output[DeploymentStacksDebugSetting]{
		OutputState: i.ToDeploymentStacksDebugSettingOutputWithContext(ctx).OutputState,
	}
}

func (i DeploymentStacksDebugSettingArgs) ToDeploymentStacksDebugSettingPtrOutput() DeploymentStacksDebugSettingPtrOutput {
	return i.ToDeploymentStacksDebugSettingPtrOutputWithContext(context.Background())
}

func (i DeploymentStacksDebugSettingArgs) ToDeploymentStacksDebugSettingPtrOutputWithContext(ctx context.Context) DeploymentStacksDebugSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStacksDebugSettingOutput).ToDeploymentStacksDebugSettingPtrOutputWithContext(ctx)
}

// DeploymentStacksDebugSettingPtrInput is an input type that accepts DeploymentStacksDebugSettingArgs, DeploymentStacksDebugSettingPtr and DeploymentStacksDebugSettingPtrOutput values.
// You can construct a concrete instance of `DeploymentStacksDebugSettingPtrInput` via:
//
//	        DeploymentStacksDebugSettingArgs{...}
//
//	or:
//
//	        nil
type DeploymentStacksDebugSettingPtrInput interface {
	pulumi.Input

	ToDeploymentStacksDebugSettingPtrOutput() DeploymentStacksDebugSettingPtrOutput
	ToDeploymentStacksDebugSettingPtrOutputWithContext(context.Context) DeploymentStacksDebugSettingPtrOutput
}

type deploymentStacksDebugSettingPtrType DeploymentStacksDebugSettingArgs

func DeploymentStacksDebugSettingPtr(v *DeploymentStacksDebugSettingArgs) DeploymentStacksDebugSettingPtrInput {
	return (*deploymentStacksDebugSettingPtrType)(v)
}

func (*deploymentStacksDebugSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStacksDebugSetting)(nil)).Elem()
}

func (i *deploymentStacksDebugSettingPtrType) ToDeploymentStacksDebugSettingPtrOutput() DeploymentStacksDebugSettingPtrOutput {
	return i.ToDeploymentStacksDebugSettingPtrOutputWithContext(context.Background())
}

func (i *deploymentStacksDebugSettingPtrType) ToDeploymentStacksDebugSettingPtrOutputWithContext(ctx context.Context) DeploymentStacksDebugSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStacksDebugSettingPtrOutput)
}

func (i *deploymentStacksDebugSettingPtrType) ToOutput(ctx context.Context) pulumix.Output[*DeploymentStacksDebugSetting] {
	return pulumix.Output[*DeploymentStacksDebugSetting]{
		OutputState: i.ToDeploymentStacksDebugSettingPtrOutputWithContext(ctx).OutputState,
	}
}

// The debug setting.
type DeploymentStacksDebugSettingOutput struct{ *pulumi.OutputState }

func (DeploymentStacksDebugSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStacksDebugSetting)(nil)).Elem()
}

func (o DeploymentStacksDebugSettingOutput) ToDeploymentStacksDebugSettingOutput() DeploymentStacksDebugSettingOutput {
	return o
}

func (o DeploymentStacksDebugSettingOutput) ToDeploymentStacksDebugSettingOutputWithContext(ctx context.Context) DeploymentStacksDebugSettingOutput {
	return o
}

func (o DeploymentStacksDebugSettingOutput) ToDeploymentStacksDebugSettingPtrOutput() DeploymentStacksDebugSettingPtrOutput {
	return o.ToDeploymentStacksDebugSettingPtrOutputWithContext(context.Background())
}

func (o DeploymentStacksDebugSettingOutput) ToDeploymentStacksDebugSettingPtrOutputWithContext(ctx context.Context) DeploymentStacksDebugSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentStacksDebugSetting) *DeploymentStacksDebugSetting {
		return &v
	}).(DeploymentStacksDebugSettingPtrOutput)
}

func (o DeploymentStacksDebugSettingOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentStacksDebugSetting] {
	return pulumix.Output[DeploymentStacksDebugSetting]{
		OutputState: o.OutputState,
	}
}

// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information that is being passed in during deployment. By logging information about the request or response, sensitive data that is retrieved through the deployment operations could potentially be exposed.
func (o DeploymentStacksDebugSettingOutput) DetailLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStacksDebugSetting) *string { return v.DetailLevel }).(pulumi.StringPtrOutput)
}

type DeploymentStacksDebugSettingPtrOutput struct{ *pulumi.OutputState }

func (DeploymentStacksDebugSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStacksDebugSetting)(nil)).Elem()
}

func (o DeploymentStacksDebugSettingPtrOutput) ToDeploymentStacksDebugSettingPtrOutput() DeploymentStacksDebugSettingPtrOutput {
	return o
}

func (o DeploymentStacksDebugSettingPtrOutput) ToDeploymentStacksDebugSettingPtrOutputWithContext(ctx context.Context) DeploymentStacksDebugSettingPtrOutput {
	return o
}

func (o DeploymentStacksDebugSettingPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DeploymentStacksDebugSetting] {
	return pulumix.Output[*DeploymentStacksDebugSetting]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentStacksDebugSettingPtrOutput) Elem() DeploymentStacksDebugSettingOutput {
	return o.ApplyT(func(v *DeploymentStacksDebugSetting) DeploymentStacksDebugSetting {
		if v != nil {
			return *v
		}
		var ret DeploymentStacksDebugSetting
		return ret
	}).(DeploymentStacksDebugSettingOutput)
}

// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information that is being passed in during deployment. By logging information about the request or response, sensitive data that is retrieved through the deployment operations could potentially be exposed.
func (o DeploymentStacksDebugSettingPtrOutput) DetailLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStacksDebugSetting) *string {
		if v == nil {
			return nil
		}
		return v.DetailLevel
	}).(pulumi.StringPtrOutput)
}

// The debug setting.
type DeploymentStacksDebugSettingResponse struct {
	// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information that is being passed in during deployment. By logging information about the request or response, sensitive data that is retrieved through the deployment operations could potentially be exposed.
	DetailLevel *string `pulumi:"detailLevel"`
}

// The debug setting.
type DeploymentStacksDebugSettingResponseOutput struct{ *pulumi.OutputState }

func (DeploymentStacksDebugSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStacksDebugSettingResponse)(nil)).Elem()
}

func (o DeploymentStacksDebugSettingResponseOutput) ToDeploymentStacksDebugSettingResponseOutput() DeploymentStacksDebugSettingResponseOutput {
	return o
}

func (o DeploymentStacksDebugSettingResponseOutput) ToDeploymentStacksDebugSettingResponseOutputWithContext(ctx context.Context) DeploymentStacksDebugSettingResponseOutput {
	return o
}

func (o DeploymentStacksDebugSettingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentStacksDebugSettingResponse] {
	return pulumix.Output[DeploymentStacksDebugSettingResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information that is being passed in during deployment. By logging information about the request or response, sensitive data that is retrieved through the deployment operations could potentially be exposed.
func (o DeploymentStacksDebugSettingResponseOutput) DetailLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStacksDebugSettingResponse) *string { return v.DetailLevel }).(pulumi.StringPtrOutput)
}

type DeploymentStacksDebugSettingResponsePtrOutput struct{ *pulumi.OutputState }

func (DeploymentStacksDebugSettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStacksDebugSettingResponse)(nil)).Elem()
}

func (o DeploymentStacksDebugSettingResponsePtrOutput) ToDeploymentStacksDebugSettingResponsePtrOutput() DeploymentStacksDebugSettingResponsePtrOutput {
	return o
}

func (o DeploymentStacksDebugSettingResponsePtrOutput) ToDeploymentStacksDebugSettingResponsePtrOutputWithContext(ctx context.Context) DeploymentStacksDebugSettingResponsePtrOutput {
	return o
}

func (o DeploymentStacksDebugSettingResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DeploymentStacksDebugSettingResponse] {
	return pulumix.Output[*DeploymentStacksDebugSettingResponse]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentStacksDebugSettingResponsePtrOutput) Elem() DeploymentStacksDebugSettingResponseOutput {
	return o.ApplyT(func(v *DeploymentStacksDebugSettingResponse) DeploymentStacksDebugSettingResponse {
		if v != nil {
			return *v
		}
		var ret DeploymentStacksDebugSettingResponse
		return ret
	}).(DeploymentStacksDebugSettingResponseOutput)
}

// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information that is being passed in during deployment. By logging information about the request or response, sensitive data that is retrieved through the deployment operations could potentially be exposed.
func (o DeploymentStacksDebugSettingResponsePtrOutput) DetailLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStacksDebugSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.DetailLevel
	}).(pulumi.StringPtrOutput)
}

// Entity representing the reference to the deployment parameters.
type DeploymentStacksParametersLink struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion *string `pulumi:"contentVersion"`
	// The URI of the parameters file.
	Uri string `pulumi:"uri"`
}

// DeploymentStacksParametersLinkInput is an input type that accepts DeploymentStacksParametersLinkArgs and DeploymentStacksParametersLinkOutput values.
// You can construct a concrete instance of `DeploymentStacksParametersLinkInput` via:
//
//	DeploymentStacksParametersLinkArgs{...}
type DeploymentStacksParametersLinkInput interface {
	pulumi.Input

	ToDeploymentStacksParametersLinkOutput() DeploymentStacksParametersLinkOutput
	ToDeploymentStacksParametersLinkOutputWithContext(context.Context) DeploymentStacksParametersLinkOutput
}

// Entity representing the reference to the deployment parameters.
type DeploymentStacksParametersLinkArgs struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion pulumi.StringPtrInput `pulumi:"contentVersion"`
	// The URI of the parameters file.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (DeploymentStacksParametersLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStacksParametersLink)(nil)).Elem()
}

func (i DeploymentStacksParametersLinkArgs) ToDeploymentStacksParametersLinkOutput() DeploymentStacksParametersLinkOutput {
	return i.ToDeploymentStacksParametersLinkOutputWithContext(context.Background())
}

func (i DeploymentStacksParametersLinkArgs) ToDeploymentStacksParametersLinkOutputWithContext(ctx context.Context) DeploymentStacksParametersLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStacksParametersLinkOutput)
}

func (i DeploymentStacksParametersLinkArgs) ToOutput(ctx context.Context) pulumix.Output[DeploymentStacksParametersLink] {
	return pulumix.Output[DeploymentStacksParametersLink]{
		OutputState: i.ToDeploymentStacksParametersLinkOutputWithContext(ctx).OutputState,
	}
}

func (i DeploymentStacksParametersLinkArgs) ToDeploymentStacksParametersLinkPtrOutput() DeploymentStacksParametersLinkPtrOutput {
	return i.ToDeploymentStacksParametersLinkPtrOutputWithContext(context.Background())
}

func (i DeploymentStacksParametersLinkArgs) ToDeploymentStacksParametersLinkPtrOutputWithContext(ctx context.Context) DeploymentStacksParametersLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStacksParametersLinkOutput).ToDeploymentStacksParametersLinkPtrOutputWithContext(ctx)
}

// DeploymentStacksParametersLinkPtrInput is an input type that accepts DeploymentStacksParametersLinkArgs, DeploymentStacksParametersLinkPtr and DeploymentStacksParametersLinkPtrOutput values.
// You can construct a concrete instance of `DeploymentStacksParametersLinkPtrInput` via:
//
//	        DeploymentStacksParametersLinkArgs{...}
//
//	or:
//
//	        nil
type DeploymentStacksParametersLinkPtrInput interface {
	pulumi.Input

	ToDeploymentStacksParametersLinkPtrOutput() DeploymentStacksParametersLinkPtrOutput
	ToDeploymentStacksParametersLinkPtrOutputWithContext(context.Context) DeploymentStacksParametersLinkPtrOutput
}

type deploymentStacksParametersLinkPtrType DeploymentStacksParametersLinkArgs

func DeploymentStacksParametersLinkPtr(v *DeploymentStacksParametersLinkArgs) DeploymentStacksParametersLinkPtrInput {
	return (*deploymentStacksParametersLinkPtrType)(v)
}

func (*deploymentStacksParametersLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStacksParametersLink)(nil)).Elem()
}

func (i *deploymentStacksParametersLinkPtrType) ToDeploymentStacksParametersLinkPtrOutput() DeploymentStacksParametersLinkPtrOutput {
	return i.ToDeploymentStacksParametersLinkPtrOutputWithContext(context.Background())
}

func (i *deploymentStacksParametersLinkPtrType) ToDeploymentStacksParametersLinkPtrOutputWithContext(ctx context.Context) DeploymentStacksParametersLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStacksParametersLinkPtrOutput)
}

func (i *deploymentStacksParametersLinkPtrType) ToOutput(ctx context.Context) pulumix.Output[*DeploymentStacksParametersLink] {
	return pulumix.Output[*DeploymentStacksParametersLink]{
		OutputState: i.ToDeploymentStacksParametersLinkPtrOutputWithContext(ctx).OutputState,
	}
}

// Entity representing the reference to the deployment parameters.
type DeploymentStacksParametersLinkOutput struct{ *pulumi.OutputState }

func (DeploymentStacksParametersLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStacksParametersLink)(nil)).Elem()
}

func (o DeploymentStacksParametersLinkOutput) ToDeploymentStacksParametersLinkOutput() DeploymentStacksParametersLinkOutput {
	return o
}

func (o DeploymentStacksParametersLinkOutput) ToDeploymentStacksParametersLinkOutputWithContext(ctx context.Context) DeploymentStacksParametersLinkOutput {
	return o
}

func (o DeploymentStacksParametersLinkOutput) ToDeploymentStacksParametersLinkPtrOutput() DeploymentStacksParametersLinkPtrOutput {
	return o.ToDeploymentStacksParametersLinkPtrOutputWithContext(context.Background())
}

func (o DeploymentStacksParametersLinkOutput) ToDeploymentStacksParametersLinkPtrOutputWithContext(ctx context.Context) DeploymentStacksParametersLinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentStacksParametersLink) *DeploymentStacksParametersLink {
		return &v
	}).(DeploymentStacksParametersLinkPtrOutput)
}

func (o DeploymentStacksParametersLinkOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentStacksParametersLink] {
	return pulumix.Output[DeploymentStacksParametersLink]{
		OutputState: o.OutputState,
	}
}

// If included, must match the ContentVersion in the template.
func (o DeploymentStacksParametersLinkOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStacksParametersLink) *string { return v.ContentVersion }).(pulumi.StringPtrOutput)
}

// The URI of the parameters file.
func (o DeploymentStacksParametersLinkOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentStacksParametersLink) string { return v.Uri }).(pulumi.StringOutput)
}

type DeploymentStacksParametersLinkPtrOutput struct{ *pulumi.OutputState }

func (DeploymentStacksParametersLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStacksParametersLink)(nil)).Elem()
}

func (o DeploymentStacksParametersLinkPtrOutput) ToDeploymentStacksParametersLinkPtrOutput() DeploymentStacksParametersLinkPtrOutput {
	return o
}

func (o DeploymentStacksParametersLinkPtrOutput) ToDeploymentStacksParametersLinkPtrOutputWithContext(ctx context.Context) DeploymentStacksParametersLinkPtrOutput {
	return o
}

func (o DeploymentStacksParametersLinkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DeploymentStacksParametersLink] {
	return pulumix.Output[*DeploymentStacksParametersLink]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentStacksParametersLinkPtrOutput) Elem() DeploymentStacksParametersLinkOutput {
	return o.ApplyT(func(v *DeploymentStacksParametersLink) DeploymentStacksParametersLink {
		if v != nil {
			return *v
		}
		var ret DeploymentStacksParametersLink
		return ret
	}).(DeploymentStacksParametersLinkOutput)
}

// If included, must match the ContentVersion in the template.
func (o DeploymentStacksParametersLinkPtrOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStacksParametersLink) *string {
		if v == nil {
			return nil
		}
		return v.ContentVersion
	}).(pulumi.StringPtrOutput)
}

// The URI of the parameters file.
func (o DeploymentStacksParametersLinkPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStacksParametersLink) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Entity representing the reference to the deployment parameters.
type DeploymentStacksParametersLinkResponse struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion *string `pulumi:"contentVersion"`
	// The URI of the parameters file.
	Uri string `pulumi:"uri"`
}

// Entity representing the reference to the deployment parameters.
type DeploymentStacksParametersLinkResponseOutput struct{ *pulumi.OutputState }

func (DeploymentStacksParametersLinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStacksParametersLinkResponse)(nil)).Elem()
}

func (o DeploymentStacksParametersLinkResponseOutput) ToDeploymentStacksParametersLinkResponseOutput() DeploymentStacksParametersLinkResponseOutput {
	return o
}

func (o DeploymentStacksParametersLinkResponseOutput) ToDeploymentStacksParametersLinkResponseOutputWithContext(ctx context.Context) DeploymentStacksParametersLinkResponseOutput {
	return o
}

func (o DeploymentStacksParametersLinkResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentStacksParametersLinkResponse] {
	return pulumix.Output[DeploymentStacksParametersLinkResponse]{
		OutputState: o.OutputState,
	}
}

// If included, must match the ContentVersion in the template.
func (o DeploymentStacksParametersLinkResponseOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStacksParametersLinkResponse) *string { return v.ContentVersion }).(pulumi.StringPtrOutput)
}

// The URI of the parameters file.
func (o DeploymentStacksParametersLinkResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentStacksParametersLinkResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type DeploymentStacksParametersLinkResponsePtrOutput struct{ *pulumi.OutputState }

func (DeploymentStacksParametersLinkResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStacksParametersLinkResponse)(nil)).Elem()
}

func (o DeploymentStacksParametersLinkResponsePtrOutput) ToDeploymentStacksParametersLinkResponsePtrOutput() DeploymentStacksParametersLinkResponsePtrOutput {
	return o
}

func (o DeploymentStacksParametersLinkResponsePtrOutput) ToDeploymentStacksParametersLinkResponsePtrOutputWithContext(ctx context.Context) DeploymentStacksParametersLinkResponsePtrOutput {
	return o
}

func (o DeploymentStacksParametersLinkResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DeploymentStacksParametersLinkResponse] {
	return pulumix.Output[*DeploymentStacksParametersLinkResponse]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentStacksParametersLinkResponsePtrOutput) Elem() DeploymentStacksParametersLinkResponseOutput {
	return o.ApplyT(func(v *DeploymentStacksParametersLinkResponse) DeploymentStacksParametersLinkResponse {
		if v != nil {
			return *v
		}
		var ret DeploymentStacksParametersLinkResponse
		return ret
	}).(DeploymentStacksParametersLinkResponseOutput)
}

// If included, must match the ContentVersion in the template.
func (o DeploymentStacksParametersLinkResponsePtrOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStacksParametersLinkResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContentVersion
	}).(pulumi.StringPtrOutput)
}

// The URI of the parameters file.
func (o DeploymentStacksParametersLinkResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStacksParametersLinkResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Entity representing the reference to the template.
type DeploymentStacksTemplateLink struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion *string `pulumi:"contentVersion"`
	// The resource id of a Template Spec. Use either the id or uri property, but not both.
	Id *string `pulumi:"id"`
	// The query string (for example, a SAS token) to be used with the templateLink URI.
	QueryString *string `pulumi:"queryString"`
	// The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
	RelativePath *string `pulumi:"relativePath"`
	// The URI of the template to deploy. Use either the uri or id property, but not both.
	Uri *string `pulumi:"uri"`
}

// DeploymentStacksTemplateLinkInput is an input type that accepts DeploymentStacksTemplateLinkArgs and DeploymentStacksTemplateLinkOutput values.
// You can construct a concrete instance of `DeploymentStacksTemplateLinkInput` via:
//
//	DeploymentStacksTemplateLinkArgs{...}
type DeploymentStacksTemplateLinkInput interface {
	pulumi.Input

	ToDeploymentStacksTemplateLinkOutput() DeploymentStacksTemplateLinkOutput
	ToDeploymentStacksTemplateLinkOutputWithContext(context.Context) DeploymentStacksTemplateLinkOutput
}

// Entity representing the reference to the template.
type DeploymentStacksTemplateLinkArgs struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion pulumi.StringPtrInput `pulumi:"contentVersion"`
	// The resource id of a Template Spec. Use either the id or uri property, but not both.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The query string (for example, a SAS token) to be used with the templateLink URI.
	QueryString pulumi.StringPtrInput `pulumi:"queryString"`
	// The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
	RelativePath pulumi.StringPtrInput `pulumi:"relativePath"`
	// The URI of the template to deploy. Use either the uri or id property, but not both.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (DeploymentStacksTemplateLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStacksTemplateLink)(nil)).Elem()
}

func (i DeploymentStacksTemplateLinkArgs) ToDeploymentStacksTemplateLinkOutput() DeploymentStacksTemplateLinkOutput {
	return i.ToDeploymentStacksTemplateLinkOutputWithContext(context.Background())
}

func (i DeploymentStacksTemplateLinkArgs) ToDeploymentStacksTemplateLinkOutputWithContext(ctx context.Context) DeploymentStacksTemplateLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStacksTemplateLinkOutput)
}

func (i DeploymentStacksTemplateLinkArgs) ToOutput(ctx context.Context) pulumix.Output[DeploymentStacksTemplateLink] {
	return pulumix.Output[DeploymentStacksTemplateLink]{
		OutputState: i.ToDeploymentStacksTemplateLinkOutputWithContext(ctx).OutputState,
	}
}

func (i DeploymentStacksTemplateLinkArgs) ToDeploymentStacksTemplateLinkPtrOutput() DeploymentStacksTemplateLinkPtrOutput {
	return i.ToDeploymentStacksTemplateLinkPtrOutputWithContext(context.Background())
}

func (i DeploymentStacksTemplateLinkArgs) ToDeploymentStacksTemplateLinkPtrOutputWithContext(ctx context.Context) DeploymentStacksTemplateLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStacksTemplateLinkOutput).ToDeploymentStacksTemplateLinkPtrOutputWithContext(ctx)
}

// DeploymentStacksTemplateLinkPtrInput is an input type that accepts DeploymentStacksTemplateLinkArgs, DeploymentStacksTemplateLinkPtr and DeploymentStacksTemplateLinkPtrOutput values.
// You can construct a concrete instance of `DeploymentStacksTemplateLinkPtrInput` via:
//
//	        DeploymentStacksTemplateLinkArgs{...}
//
//	or:
//
//	        nil
type DeploymentStacksTemplateLinkPtrInput interface {
	pulumi.Input

	ToDeploymentStacksTemplateLinkPtrOutput() DeploymentStacksTemplateLinkPtrOutput
	ToDeploymentStacksTemplateLinkPtrOutputWithContext(context.Context) DeploymentStacksTemplateLinkPtrOutput
}

type deploymentStacksTemplateLinkPtrType DeploymentStacksTemplateLinkArgs

func DeploymentStacksTemplateLinkPtr(v *DeploymentStacksTemplateLinkArgs) DeploymentStacksTemplateLinkPtrInput {
	return (*deploymentStacksTemplateLinkPtrType)(v)
}

func (*deploymentStacksTemplateLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStacksTemplateLink)(nil)).Elem()
}

func (i *deploymentStacksTemplateLinkPtrType) ToDeploymentStacksTemplateLinkPtrOutput() DeploymentStacksTemplateLinkPtrOutput {
	return i.ToDeploymentStacksTemplateLinkPtrOutputWithContext(context.Background())
}

func (i *deploymentStacksTemplateLinkPtrType) ToDeploymentStacksTemplateLinkPtrOutputWithContext(ctx context.Context) DeploymentStacksTemplateLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStacksTemplateLinkPtrOutput)
}

func (i *deploymentStacksTemplateLinkPtrType) ToOutput(ctx context.Context) pulumix.Output[*DeploymentStacksTemplateLink] {
	return pulumix.Output[*DeploymentStacksTemplateLink]{
		OutputState: i.ToDeploymentStacksTemplateLinkPtrOutputWithContext(ctx).OutputState,
	}
}

// Entity representing the reference to the template.
type DeploymentStacksTemplateLinkOutput struct{ *pulumi.OutputState }

func (DeploymentStacksTemplateLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentStacksTemplateLink)(nil)).Elem()
}

func (o DeploymentStacksTemplateLinkOutput) ToDeploymentStacksTemplateLinkOutput() DeploymentStacksTemplateLinkOutput {
	return o
}

func (o DeploymentStacksTemplateLinkOutput) ToDeploymentStacksTemplateLinkOutputWithContext(ctx context.Context) DeploymentStacksTemplateLinkOutput {
	return o
}

func (o DeploymentStacksTemplateLinkOutput) ToDeploymentStacksTemplateLinkPtrOutput() DeploymentStacksTemplateLinkPtrOutput {
	return o.ToDeploymentStacksTemplateLinkPtrOutputWithContext(context.Background())
}

func (o DeploymentStacksTemplateLinkOutput) ToDeploymentStacksTemplateLinkPtrOutputWithContext(ctx context.Context) DeploymentStacksTemplateLinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentStacksTemplateLink) *DeploymentStacksTemplateLink {
		return &v
	}).(DeploymentStacksTemplateLinkPtrOutput)
}

func (o DeploymentStacksTemplateLinkOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentStacksTemplateLink] {
	return pulumix.Output[DeploymentStacksTemplateLink]{
		OutputState: o.OutputState,
	}
}

// If included, must match the ContentVersion in the template.
func (o DeploymentStacksTemplateLinkOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStacksTemplateLink) *string { return v.ContentVersion }).(pulumi.StringPtrOutput)
}

// The resource id of a Template Spec. Use either the id or uri property, but not both.
func (o DeploymentStacksTemplateLinkOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStacksTemplateLink) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The query string (for example, a SAS token) to be used with the templateLink URI.
func (o DeploymentStacksTemplateLinkOutput) QueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStacksTemplateLink) *string { return v.QueryString }).(pulumi.StringPtrOutput)
}

// The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
func (o DeploymentStacksTemplateLinkOutput) RelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStacksTemplateLink) *string { return v.RelativePath }).(pulumi.StringPtrOutput)
}

// The URI of the template to deploy. Use either the uri or id property, but not both.
func (o DeploymentStacksTemplateLinkOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentStacksTemplateLink) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type DeploymentStacksTemplateLinkPtrOutput struct{ *pulumi.OutputState }

func (DeploymentStacksTemplateLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStacksTemplateLink)(nil)).Elem()
}

func (o DeploymentStacksTemplateLinkPtrOutput) ToDeploymentStacksTemplateLinkPtrOutput() DeploymentStacksTemplateLinkPtrOutput {
	return o
}

func (o DeploymentStacksTemplateLinkPtrOutput) ToDeploymentStacksTemplateLinkPtrOutputWithContext(ctx context.Context) DeploymentStacksTemplateLinkPtrOutput {
	return o
}

func (o DeploymentStacksTemplateLinkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DeploymentStacksTemplateLink] {
	return pulumix.Output[*DeploymentStacksTemplateLink]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentStacksTemplateLinkPtrOutput) Elem() DeploymentStacksTemplateLinkOutput {
	return o.ApplyT(func(v *DeploymentStacksTemplateLink) DeploymentStacksTemplateLink {
		if v != nil {
			return *v
		}
		var ret DeploymentStacksTemplateLink
		return ret
	}).(DeploymentStacksTemplateLinkOutput)
}

// If included, must match the ContentVersion in the template.
func (o DeploymentStacksTemplateLinkPtrOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStacksTemplateLink) *string {
		if v == nil {
			return nil
		}
		return v.ContentVersion
	}).(pulumi.StringPtrOutput)
}

// The resource id of a Template Spec. Use either the id or uri property, but not both.
func (o DeploymentStacksTemplateLinkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStacksTemplateLink) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The query string (for example, a SAS token) to be used with the templateLink URI.
func (o DeploymentStacksTemplateLinkPtrOutput) QueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStacksTemplateLink) *string {
		if v == nil {
			return nil
		}
		return v.QueryString
	}).(pulumi.StringPtrOutput)
}

// The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
func (o DeploymentStacksTemplateLinkPtrOutput) RelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStacksTemplateLink) *string {
		if v == nil {
			return nil
		}
		return v.RelativePath
	}).(pulumi.StringPtrOutput)
}

// The URI of the template to deploy. Use either the uri or id property, but not both.
func (o DeploymentStacksTemplateLinkPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStacksTemplateLink) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The environment variable to pass to the script in the container instance.
type EnvironmentVariable struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue *string `pulumi:"secureValue"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// EnvironmentVariableInput is an input type that accepts EnvironmentVariableArgs and EnvironmentVariableOutput values.
// You can construct a concrete instance of `EnvironmentVariableInput` via:
//
//	EnvironmentVariableArgs{...}
type EnvironmentVariableInput interface {
	pulumi.Input

	ToEnvironmentVariableOutput() EnvironmentVariableOutput
	ToEnvironmentVariableOutputWithContext(context.Context) EnvironmentVariableOutput
}

// The environment variable to pass to the script in the container instance.
type EnvironmentVariableArgs struct {
	// The name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue pulumi.StringPtrInput `pulumi:"secureValue"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return i.ToEnvironmentVariableOutputWithContext(context.Background())
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOutput)
}

func (i EnvironmentVariableArgs) ToOutput(ctx context.Context) pulumix.Output[EnvironmentVariable] {
	return pulumix.Output[EnvironmentVariable]{
		OutputState: i.ToEnvironmentVariableOutputWithContext(ctx).OutputState,
	}
}

// EnvironmentVariableArrayInput is an input type that accepts EnvironmentVariableArray and EnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableArrayInput` via:
//
//	EnvironmentVariableArray{ EnvironmentVariableArgs{...} }
type EnvironmentVariableArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput
	ToEnvironmentVariableArrayOutputWithContext(context.Context) EnvironmentVariableArrayOutput
}

type EnvironmentVariableArray []EnvironmentVariableInput

func (EnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return i.ToEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableArrayOutput)
}

func (i EnvironmentVariableArray) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentVariable] {
	return pulumix.Output[[]EnvironmentVariable]{
		OutputState: i.ToEnvironmentVariableArrayOutputWithContext(ctx).OutputState,
	}
}

// The environment variable to pass to the script in the container instance.
type EnvironmentVariableOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return o
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return o
}

func (o EnvironmentVariableOutput) ToOutput(ctx context.Context) pulumix.Output[EnvironmentVariable] {
	return pulumix.Output[EnvironmentVariable]{
		OutputState: o.OutputState,
	}
}

// The name of the environment variable.
func (o EnvironmentVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariable) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the secure environment variable.
func (o EnvironmentVariableOutput) SecureValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.SecureValue }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentVariable] {
	return pulumix.Output[[]EnvironmentVariable]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentVariableArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariable {
		return vs[0].([]EnvironmentVariable)[vs[1].(int)]
	}).(EnvironmentVariableOutput)
}

// The environment variable to pass to the script in the container instance.
type EnvironmentVariableResponse struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue *string `pulumi:"secureValue"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// The environment variable to pass to the script in the container instance.
type EnvironmentVariableResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput {
	return o
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutputWithContext(ctx context.Context) EnvironmentVariableResponseOutput {
	return o
}

func (o EnvironmentVariableResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EnvironmentVariableResponse] {
	return pulumix.Output[EnvironmentVariableResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the environment variable.
func (o EnvironmentVariableResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the secure environment variable.
func (o EnvironmentVariableResponseOutput) SecureValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.SecureValue }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentVariableResponse] {
	return pulumix.Output[[]EnvironmentVariableResponse]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentVariableResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableResponse {
		return vs[0].([]EnvironmentVariableResponse)[vs[1].(int)]
	}).(EnvironmentVariableResponseOutput)
}

// The resource management error additional info.
type ErrorAdditionalInfoResponse struct {
	// The additional info.
	Info interface{} `pulumi:"info"`
	// The additional info type.
	Type string `pulumi:"type"`
}

// The resource management error additional info.
type ErrorAdditionalInfoResponseOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutput() ErrorAdditionalInfoResponseOutput {
	return o
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseOutput {
	return o
}

func (o ErrorAdditionalInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ErrorAdditionalInfoResponse] {
	return pulumix.Output[ErrorAdditionalInfoResponse]{
		OutputState: o.OutputState,
	}
}

// The additional info.
func (o ErrorAdditionalInfoResponseOutput) Info() pulumi.AnyOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) interface{} { return v.Info }).(pulumi.AnyOutput)
}

// The additional info type.
func (o ErrorAdditionalInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ErrorAdditionalInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutput() ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ErrorAdditionalInfoResponse] {
	return pulumix.Output[[]ErrorAdditionalInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o ErrorAdditionalInfoResponseArrayOutput) Index(i pulumi.IntInput) ErrorAdditionalInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorAdditionalInfoResponse {
		return vs[0].([]ErrorAdditionalInfoResponse)[vs[1].(int)]
	}).(ErrorAdditionalInfoResponseOutput)
}

// The error detail.
type ErrorDetailResponse struct {
	// The error additional info.
	AdditionalInfo []ErrorAdditionalInfoResponse `pulumi:"additionalInfo"`
	// The error code.
	Code string `pulumi:"code"`
	// The error details.
	Details []ErrorDetailResponse `pulumi:"details"`
	// The error message.
	Message string `pulumi:"message"`
	// The error target.
	Target string `pulumi:"target"`
}

// The error detail.
type ErrorDetailResponseOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutput() ErrorDetailResponseOutput {
	return o
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutputWithContext(ctx context.Context) ErrorDetailResponseOutput {
	return o
}

func (o ErrorDetailResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ErrorDetailResponse] {
	return pulumix.Output[ErrorDetailResponse]{
		OutputState: o.OutputState,
	}
}

// The error additional info.
func (o ErrorDetailResponseOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorAdditionalInfoResponse { return v.AdditionalInfo }).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorDetailResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The error details.
func (o ErrorDetailResponseOutput) Details() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorDetailResponse { return v.Details }).(ErrorDetailResponseArrayOutput)
}

// The error message.
func (o ErrorDetailResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The error target.
func (o ErrorDetailResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Target }).(pulumi.StringOutput)
}

type ErrorDetailResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponsePtrOutput) ToErrorDetailResponsePtrOutput() ErrorDetailResponsePtrOutput {
	return o
}

func (o ErrorDetailResponsePtrOutput) ToErrorDetailResponsePtrOutputWithContext(ctx context.Context) ErrorDetailResponsePtrOutput {
	return o
}

func (o ErrorDetailResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ErrorDetailResponse] {
	return pulumix.Output[*ErrorDetailResponse]{
		OutputState: o.OutputState,
	}
}

func (o ErrorDetailResponsePtrOutput) Elem() ErrorDetailResponseOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) ErrorDetailResponse {
		if v != nil {
			return *v
		}
		var ret ErrorDetailResponse
		return ret
	}).(ErrorDetailResponseOutput)
}

// The error additional info.
func (o ErrorDetailResponsePtrOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) []ErrorAdditionalInfoResponse {
		if v == nil {
			return nil
		}
		return v.AdditionalInfo
	}).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorDetailResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// The error details.
func (o ErrorDetailResponsePtrOutput) Details() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) []ErrorDetailResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ErrorDetailResponseArrayOutput)
}

// The error message.
func (o ErrorDetailResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// The error target.
func (o ErrorDetailResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.StringPtrOutput)
}

type ErrorDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutput() ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutputWithContext(ctx context.Context) ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ErrorDetailResponse] {
	return pulumix.Output[[]ErrorDetailResponse]{
		OutputState: o.OutputState,
	}
}

func (o ErrorDetailResponseArrayOutput) Index(i pulumi.IntInput) ErrorDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorDetailResponse {
		return vs[0].([]ErrorDetailResponse)[vs[1].(int)]
	}).(ErrorDetailResponseOutput)
}

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
type ErrorResponseResponse struct {
	// The error additional info.
	AdditionalInfo []ErrorAdditionalInfoResponse `pulumi:"additionalInfo"`
	// The error code.
	Code *string `pulumi:"code"`
	// The error details.
	Details []ErrorResponseResponse `pulumi:"details"`
	// The error object.
	Error *ErrorDetailResponse `pulumi:"error"`
	// The error message.
	Message *string `pulumi:"message"`
	// The error target.
	Target *string `pulumi:"target"`
}

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
type ErrorResponseResponseOutput struct{ *pulumi.OutputState }

func (ErrorResponseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorResponseResponse)(nil)).Elem()
}

func (o ErrorResponseResponseOutput) ToErrorResponseResponseOutput() ErrorResponseResponseOutput {
	return o
}

func (o ErrorResponseResponseOutput) ToErrorResponseResponseOutputWithContext(ctx context.Context) ErrorResponseResponseOutput {
	return o
}

func (o ErrorResponseResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ErrorResponseResponse] {
	return pulumix.Output[ErrorResponseResponse]{
		OutputState: o.OutputState,
	}
}

// The error additional info.
func (o ErrorResponseResponseOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v ErrorResponseResponse) []ErrorAdditionalInfoResponse { return v.AdditionalInfo }).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorResponseResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorResponseResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The error details.
func (o ErrorResponseResponseOutput) Details() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v ErrorResponseResponse) []ErrorResponseResponse { return v.Details }).(ErrorResponseResponseArrayOutput)
}

// The error object.
func (o ErrorResponseResponseOutput) Error() ErrorDetailResponsePtrOutput {
	return o.ApplyT(func(v ErrorResponseResponse) *ErrorDetailResponse { return v.Error }).(ErrorDetailResponsePtrOutput)
}

// The error message.
func (o ErrorResponseResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorResponseResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The error target.
func (o ErrorResponseResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorResponseResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ErrorResponseResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorResponseResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorResponseResponse)(nil)).Elem()
}

func (o ErrorResponseResponsePtrOutput) ToErrorResponseResponsePtrOutput() ErrorResponseResponsePtrOutput {
	return o
}

func (o ErrorResponseResponsePtrOutput) ToErrorResponseResponsePtrOutputWithContext(ctx context.Context) ErrorResponseResponsePtrOutput {
	return o
}

func (o ErrorResponseResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ErrorResponseResponse] {
	return pulumix.Output[*ErrorResponseResponse]{
		OutputState: o.OutputState,
	}
}

func (o ErrorResponseResponsePtrOutput) Elem() ErrorResponseResponseOutput {
	return o.ApplyT(func(v *ErrorResponseResponse) ErrorResponseResponse {
		if v != nil {
			return *v
		}
		var ret ErrorResponseResponse
		return ret
	}).(ErrorResponseResponseOutput)
}

// The error additional info.
func (o ErrorResponseResponsePtrOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v *ErrorResponseResponse) []ErrorAdditionalInfoResponse {
		if v == nil {
			return nil
		}
		return v.AdditionalInfo
	}).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorResponseResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// The error details.
func (o ErrorResponseResponsePtrOutput) Details() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v *ErrorResponseResponse) []ErrorResponseResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ErrorResponseResponseArrayOutput)
}

// The error object.
func (o ErrorResponseResponsePtrOutput) Error() ErrorDetailResponsePtrOutput {
	return o.ApplyT(func(v *ErrorResponseResponse) *ErrorDetailResponse {
		if v == nil {
			return nil
		}
		return v.Error
	}).(ErrorDetailResponsePtrOutput)
}

// The error message.
func (o ErrorResponseResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The error target.
func (o ErrorResponseResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponseResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

type ErrorResponseResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorResponseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorResponseResponse)(nil)).Elem()
}

func (o ErrorResponseResponseArrayOutput) ToErrorResponseResponseArrayOutput() ErrorResponseResponseArrayOutput {
	return o
}

func (o ErrorResponseResponseArrayOutput) ToErrorResponseResponseArrayOutputWithContext(ctx context.Context) ErrorResponseResponseArrayOutput {
	return o
}

func (o ErrorResponseResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ErrorResponseResponse] {
	return pulumix.Output[[]ErrorResponseResponse]{
		OutputState: o.OutputState,
	}
}

func (o ErrorResponseResponseArrayOutput) Index(i pulumi.IntInput) ErrorResponseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorResponseResponse {
		return vs[0].([]ErrorResponseResponse)[vs[1].(int)]
	}).(ErrorResponseResponseOutput)
}

// Specifies whether template expressions are evaluated within the scope of the parent template or nested template.
type ExpressionEvaluationOptions struct {
	// The scope to be used for evaluation of parameters, variables and functions in a nested template.
	Scope *string `pulumi:"scope"`
}

// ExpressionEvaluationOptionsInput is an input type that accepts ExpressionEvaluationOptionsArgs and ExpressionEvaluationOptionsOutput values.
// You can construct a concrete instance of `ExpressionEvaluationOptionsInput` via:
//
//	ExpressionEvaluationOptionsArgs{...}
type ExpressionEvaluationOptionsInput interface {
	pulumi.Input

	ToExpressionEvaluationOptionsOutput() ExpressionEvaluationOptionsOutput
	ToExpressionEvaluationOptionsOutputWithContext(context.Context) ExpressionEvaluationOptionsOutput
}

// Specifies whether template expressions are evaluated within the scope of the parent template or nested template.
type ExpressionEvaluationOptionsArgs struct {
	// The scope to be used for evaluation of parameters, variables and functions in a nested template.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (ExpressionEvaluationOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressionEvaluationOptions)(nil)).Elem()
}

func (i ExpressionEvaluationOptionsArgs) ToExpressionEvaluationOptionsOutput() ExpressionEvaluationOptionsOutput {
	return i.ToExpressionEvaluationOptionsOutputWithContext(context.Background())
}

func (i ExpressionEvaluationOptionsArgs) ToExpressionEvaluationOptionsOutputWithContext(ctx context.Context) ExpressionEvaluationOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionEvaluationOptionsOutput)
}

func (i ExpressionEvaluationOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[ExpressionEvaluationOptions] {
	return pulumix.Output[ExpressionEvaluationOptions]{
		OutputState: i.ToExpressionEvaluationOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i ExpressionEvaluationOptionsArgs) ToExpressionEvaluationOptionsPtrOutput() ExpressionEvaluationOptionsPtrOutput {
	return i.ToExpressionEvaluationOptionsPtrOutputWithContext(context.Background())
}

func (i ExpressionEvaluationOptionsArgs) ToExpressionEvaluationOptionsPtrOutputWithContext(ctx context.Context) ExpressionEvaluationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionEvaluationOptionsOutput).ToExpressionEvaluationOptionsPtrOutputWithContext(ctx)
}

// ExpressionEvaluationOptionsPtrInput is an input type that accepts ExpressionEvaluationOptionsArgs, ExpressionEvaluationOptionsPtr and ExpressionEvaluationOptionsPtrOutput values.
// You can construct a concrete instance of `ExpressionEvaluationOptionsPtrInput` via:
//
//	        ExpressionEvaluationOptionsArgs{...}
//
//	or:
//
//	        nil
type ExpressionEvaluationOptionsPtrInput interface {
	pulumi.Input

	ToExpressionEvaluationOptionsPtrOutput() ExpressionEvaluationOptionsPtrOutput
	ToExpressionEvaluationOptionsPtrOutputWithContext(context.Context) ExpressionEvaluationOptionsPtrOutput
}

type expressionEvaluationOptionsPtrType ExpressionEvaluationOptionsArgs

func ExpressionEvaluationOptionsPtr(v *ExpressionEvaluationOptionsArgs) ExpressionEvaluationOptionsPtrInput {
	return (*expressionEvaluationOptionsPtrType)(v)
}

func (*expressionEvaluationOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressionEvaluationOptions)(nil)).Elem()
}

func (i *expressionEvaluationOptionsPtrType) ToExpressionEvaluationOptionsPtrOutput() ExpressionEvaluationOptionsPtrOutput {
	return i.ToExpressionEvaluationOptionsPtrOutputWithContext(context.Background())
}

func (i *expressionEvaluationOptionsPtrType) ToExpressionEvaluationOptionsPtrOutputWithContext(ctx context.Context) ExpressionEvaluationOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionEvaluationOptionsPtrOutput)
}

func (i *expressionEvaluationOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ExpressionEvaluationOptions] {
	return pulumix.Output[*ExpressionEvaluationOptions]{
		OutputState: i.ToExpressionEvaluationOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies whether template expressions are evaluated within the scope of the parent template or nested template.
type ExpressionEvaluationOptionsOutput struct{ *pulumi.OutputState }

func (ExpressionEvaluationOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressionEvaluationOptions)(nil)).Elem()
}

func (o ExpressionEvaluationOptionsOutput) ToExpressionEvaluationOptionsOutput() ExpressionEvaluationOptionsOutput {
	return o
}

func (o ExpressionEvaluationOptionsOutput) ToExpressionEvaluationOptionsOutputWithContext(ctx context.Context) ExpressionEvaluationOptionsOutput {
	return o
}

func (o ExpressionEvaluationOptionsOutput) ToExpressionEvaluationOptionsPtrOutput() ExpressionEvaluationOptionsPtrOutput {
	return o.ToExpressionEvaluationOptionsPtrOutputWithContext(context.Background())
}

func (o ExpressionEvaluationOptionsOutput) ToExpressionEvaluationOptionsPtrOutputWithContext(ctx context.Context) ExpressionEvaluationOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExpressionEvaluationOptions) *ExpressionEvaluationOptions {
		return &v
	}).(ExpressionEvaluationOptionsPtrOutput)
}

func (o ExpressionEvaluationOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[ExpressionEvaluationOptions] {
	return pulumix.Output[ExpressionEvaluationOptions]{
		OutputState: o.OutputState,
	}
}

// The scope to be used for evaluation of parameters, variables and functions in a nested template.
func (o ExpressionEvaluationOptionsOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpressionEvaluationOptions) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type ExpressionEvaluationOptionsPtrOutput struct{ *pulumi.OutputState }

func (ExpressionEvaluationOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressionEvaluationOptions)(nil)).Elem()
}

func (o ExpressionEvaluationOptionsPtrOutput) ToExpressionEvaluationOptionsPtrOutput() ExpressionEvaluationOptionsPtrOutput {
	return o
}

func (o ExpressionEvaluationOptionsPtrOutput) ToExpressionEvaluationOptionsPtrOutputWithContext(ctx context.Context) ExpressionEvaluationOptionsPtrOutput {
	return o
}

func (o ExpressionEvaluationOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExpressionEvaluationOptions] {
	return pulumix.Output[*ExpressionEvaluationOptions]{
		OutputState: o.OutputState,
	}
}

func (o ExpressionEvaluationOptionsPtrOutput) Elem() ExpressionEvaluationOptionsOutput {
	return o.ApplyT(func(v *ExpressionEvaluationOptions) ExpressionEvaluationOptions {
		if v != nil {
			return *v
		}
		var ret ExpressionEvaluationOptions
		return ret
	}).(ExpressionEvaluationOptionsOutput)
}

// The scope to be used for evaluation of parameters, variables and functions in a nested template.
func (o ExpressionEvaluationOptionsPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressionEvaluationOptions) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// Resource extended location.
type ExtendedLocation struct {
	// The extended location name.
	Name *string `pulumi:"name"`
	// The extended location type.
	Type *string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// Resource extended location.
type ExtendedLocationArgs struct {
	// The extended location name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The extended location type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

func (i ExtendedLocationArgs) ToOutput(ctx context.Context) pulumix.Output[ExtendedLocation] {
	return pulumix.Output[ExtendedLocation]{
		OutputState: i.ToExtendedLocationOutputWithContext(ctx).OutputState,
	}
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput).ToExtendedLocationPtrOutputWithContext(ctx)
}

// ExtendedLocationPtrInput is an input type that accepts ExtendedLocationArgs, ExtendedLocationPtr and ExtendedLocationPtrOutput values.
// You can construct a concrete instance of `ExtendedLocationPtrInput` via:
//
//	        ExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type ExtendedLocationPtrInput interface {
	pulumi.Input

	ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput
	ToExtendedLocationPtrOutputWithContext(context.Context) ExtendedLocationPtrOutput
}

type extendedLocationPtrType ExtendedLocationArgs

func ExtendedLocationPtr(v *ExtendedLocationArgs) ExtendedLocationPtrInput {
	return (*extendedLocationPtrType)(v)
}

func (*extendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationPtrOutput)
}

func (i *extendedLocationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ExtendedLocation] {
	return pulumix.Output[*ExtendedLocation]{
		OutputState: i.ToExtendedLocationPtrOutputWithContext(ctx).OutputState,
	}
}

// Resource extended location.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocation) *ExtendedLocation {
		return &v
	}).(ExtendedLocationPtrOutput)
}

func (o ExtendedLocationOutput) ToOutput(ctx context.Context) pulumix.Output[ExtendedLocation] {
	return pulumix.Output[ExtendedLocation]{
		OutputState: o.OutputState,
	}
}

// The extended location name.
func (o ExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o ExtendedLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExtendedLocation] {
	return pulumix.Output[*ExtendedLocation]{
		OutputState: o.OutputState,
	}
}

func (o ExtendedLocationPtrOutput) Elem() ExtendedLocationOutput {
	return o.ApplyT(func(v *ExtendedLocation) ExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ExtendedLocation
		return ret
	}).(ExtendedLocationOutput)
}

// The extended location name.
func (o ExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o ExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Resource extended location.
type ExtendedLocationResponse struct {
	// The extended location name.
	Name *string `pulumi:"name"`
	// The extended location type.
	Type *string `pulumi:"type"`
}

// Resource extended location.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExtendedLocationResponse] {
	return pulumix.Output[ExtendedLocationResponse]{
		OutputState: o.OutputState,
	}
}

// The extended location name.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutput() ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutputWithContext(ctx context.Context) ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExtendedLocationResponse] {
	return pulumix.Output[*ExtendedLocationResponse]{
		OutputState: o.OutputState,
	}
}

func (o ExtendedLocationResponsePtrOutput) Elem() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) ExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationResponse
		return ret
	}).(ExtendedLocationResponseOutput)
}

// The extended location name.
func (o ExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o ExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type Identity struct {
	// The identity type.
	Type *ResourceIdentityType `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//	IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The identity type.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToOutput(ctx context.Context) pulumix.Output[Identity] {
	return pulumix.Output[Identity]{
		OutputState: i.ToIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//	        IdentityArgs{...}
//
//	or:
//
//	        nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

func (i *identityPtrType) ToOutput(ctx context.Context) pulumix.Output[*Identity] {
	return pulumix.Output[*Identity]{
		OutputState: i.ToIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

func (o IdentityOutput) ToOutput(ctx context.Context) pulumix.Output[Identity] {
	return pulumix.Output[Identity]{
		OutputState: o.OutputState,
	}
}

// The identity type.
func (o IdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v Identity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Identity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Identity] {
	return pulumix.Output[*Identity]{
		OutputState: o.OutputState,
	}
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity {
		if v != nil {
			return *v
		}
		var ret Identity
		return ret
	}).(IdentityOutput)
}

// The identity type.
func (o IdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *Identity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Identity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]IdentityResponseUserAssignedIdentities `pulumi:"userAssignedIdentities"`
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityResponse] {
	return pulumix.Output[IdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The principal ID of resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of resource.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o IdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityResponseOutput) UserAssignedIdentities() IdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v IdentityResponse) map[string]IdentityResponseUserAssignedIdentities {
		return v.UserAssignedIdentities
	}).(IdentityResponseUserAssignedIdentitiesMapOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IdentityResponse] {
	return pulumix.Output[*IdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse {
		if v != nil {
			return *v
		}
		var ret IdentityResponse
		return ret
	}).(IdentityResponseOutput)
}

// The principal ID of resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityResponsePtrOutput) UserAssignedIdentities() IdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v *IdentityResponse) map[string]IdentityResponseUserAssignedIdentities {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(IdentityResponseUserAssignedIdentitiesMapOutput)
}

type IdentityResponseUserAssignedIdentities struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

type IdentityResponseUserAssignedIdentitiesOutput struct{ *pulumi.OutputState }

func (IdentityResponseUserAssignedIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o IdentityResponseUserAssignedIdentitiesOutput) ToIdentityResponseUserAssignedIdentitiesOutput() IdentityResponseUserAssignedIdentitiesOutput {
	return o
}

func (o IdentityResponseUserAssignedIdentitiesOutput) ToIdentityResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) IdentityResponseUserAssignedIdentitiesOutput {
	return o
}

func (o IdentityResponseUserAssignedIdentitiesOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityResponseUserAssignedIdentities] {
	return pulumix.Output[IdentityResponseUserAssignedIdentities]{
		OutputState: o.OutputState,
	}
}

// The client id of user assigned identity.
func (o IdentityResponseUserAssignedIdentitiesOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponseUserAssignedIdentities) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o IdentityResponseUserAssignedIdentitiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponseUserAssignedIdentities) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type IdentityResponseUserAssignedIdentitiesMapOutput struct{ *pulumi.OutputState }

func (IdentityResponseUserAssignedIdentitiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o IdentityResponseUserAssignedIdentitiesMapOutput) ToIdentityResponseUserAssignedIdentitiesMapOutput() IdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o IdentityResponseUserAssignedIdentitiesMapOutput) ToIdentityResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) IdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o IdentityResponseUserAssignedIdentitiesMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]IdentityResponseUserAssignedIdentities] {
	return pulumix.Output[map[string]IdentityResponseUserAssignedIdentities]{
		OutputState: o.OutputState,
	}
}

func (o IdentityResponseUserAssignedIdentitiesMapOutput) MapIndex(k pulumi.StringInput) IdentityResponseUserAssignedIdentitiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentityResponseUserAssignedIdentities {
		return vs[0].(map[string]IdentityResponseUserAssignedIdentities)[vs[1].(string)]
	}).(IdentityResponseUserAssignedIdentitiesOutput)
}

// Azure Key Vault parameter reference.
type KeyVaultParameterReference struct {
	// Azure Key Vault reference.
	KeyVault KeyVaultReference `pulumi:"keyVault"`
	// Azure Key Vault secret name.
	SecretName string `pulumi:"secretName"`
	// Azure Key Vault secret version.
	SecretVersion *string `pulumi:"secretVersion"`
}

// KeyVaultParameterReferenceInput is an input type that accepts KeyVaultParameterReferenceArgs and KeyVaultParameterReferenceOutput values.
// You can construct a concrete instance of `KeyVaultParameterReferenceInput` via:
//
//	KeyVaultParameterReferenceArgs{...}
type KeyVaultParameterReferenceInput interface {
	pulumi.Input

	ToKeyVaultParameterReferenceOutput() KeyVaultParameterReferenceOutput
	ToKeyVaultParameterReferenceOutputWithContext(context.Context) KeyVaultParameterReferenceOutput
}

// Azure Key Vault parameter reference.
type KeyVaultParameterReferenceArgs struct {
	// Azure Key Vault reference.
	KeyVault KeyVaultReferenceInput `pulumi:"keyVault"`
	// Azure Key Vault secret name.
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// Azure Key Vault secret version.
	SecretVersion pulumi.StringPtrInput `pulumi:"secretVersion"`
}

func (KeyVaultParameterReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultParameterReference)(nil)).Elem()
}

func (i KeyVaultParameterReferenceArgs) ToKeyVaultParameterReferenceOutput() KeyVaultParameterReferenceOutput {
	return i.ToKeyVaultParameterReferenceOutputWithContext(context.Background())
}

func (i KeyVaultParameterReferenceArgs) ToKeyVaultParameterReferenceOutputWithContext(ctx context.Context) KeyVaultParameterReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultParameterReferenceOutput)
}

func (i KeyVaultParameterReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[KeyVaultParameterReference] {
	return pulumix.Output[KeyVaultParameterReference]{
		OutputState: i.ToKeyVaultParameterReferenceOutputWithContext(ctx).OutputState,
	}
}

func (i KeyVaultParameterReferenceArgs) ToKeyVaultParameterReferencePtrOutput() KeyVaultParameterReferencePtrOutput {
	return i.ToKeyVaultParameterReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultParameterReferenceArgs) ToKeyVaultParameterReferencePtrOutputWithContext(ctx context.Context) KeyVaultParameterReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultParameterReferenceOutput).ToKeyVaultParameterReferencePtrOutputWithContext(ctx)
}

// KeyVaultParameterReferencePtrInput is an input type that accepts KeyVaultParameterReferenceArgs, KeyVaultParameterReferencePtr and KeyVaultParameterReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultParameterReferencePtrInput` via:
//
//	        KeyVaultParameterReferenceArgs{...}
//
//	or:
//
//	        nil
type KeyVaultParameterReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultParameterReferencePtrOutput() KeyVaultParameterReferencePtrOutput
	ToKeyVaultParameterReferencePtrOutputWithContext(context.Context) KeyVaultParameterReferencePtrOutput
}

type keyVaultParameterReferencePtrType KeyVaultParameterReferenceArgs

func KeyVaultParameterReferencePtr(v *KeyVaultParameterReferenceArgs) KeyVaultParameterReferencePtrInput {
	return (*keyVaultParameterReferencePtrType)(v)
}

func (*keyVaultParameterReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultParameterReference)(nil)).Elem()
}

func (i *keyVaultParameterReferencePtrType) ToKeyVaultParameterReferencePtrOutput() KeyVaultParameterReferencePtrOutput {
	return i.ToKeyVaultParameterReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultParameterReferencePtrType) ToKeyVaultParameterReferencePtrOutputWithContext(ctx context.Context) KeyVaultParameterReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultParameterReferencePtrOutput)
}

func (i *keyVaultParameterReferencePtrType) ToOutput(ctx context.Context) pulumix.Output[*KeyVaultParameterReference] {
	return pulumix.Output[*KeyVaultParameterReference]{
		OutputState: i.ToKeyVaultParameterReferencePtrOutputWithContext(ctx).OutputState,
	}
}

// Azure Key Vault parameter reference.
type KeyVaultParameterReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultParameterReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultParameterReference)(nil)).Elem()
}

func (o KeyVaultParameterReferenceOutput) ToKeyVaultParameterReferenceOutput() KeyVaultParameterReferenceOutput {
	return o
}

func (o KeyVaultParameterReferenceOutput) ToKeyVaultParameterReferenceOutputWithContext(ctx context.Context) KeyVaultParameterReferenceOutput {
	return o
}

func (o KeyVaultParameterReferenceOutput) ToKeyVaultParameterReferencePtrOutput() KeyVaultParameterReferencePtrOutput {
	return o.ToKeyVaultParameterReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultParameterReferenceOutput) ToKeyVaultParameterReferencePtrOutputWithContext(ctx context.Context) KeyVaultParameterReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultParameterReference) *KeyVaultParameterReference {
		return &v
	}).(KeyVaultParameterReferencePtrOutput)
}

func (o KeyVaultParameterReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[KeyVaultParameterReference] {
	return pulumix.Output[KeyVaultParameterReference]{
		OutputState: o.OutputState,
	}
}

// Azure Key Vault reference.
func (o KeyVaultParameterReferenceOutput) KeyVault() KeyVaultReferenceOutput {
	return o.ApplyT(func(v KeyVaultParameterReference) KeyVaultReference { return v.KeyVault }).(KeyVaultReferenceOutput)
}

// Azure Key Vault secret name.
func (o KeyVaultParameterReferenceOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultParameterReference) string { return v.SecretName }).(pulumi.StringOutput)
}

// Azure Key Vault secret version.
func (o KeyVaultParameterReferenceOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultParameterReference) *string { return v.SecretVersion }).(pulumi.StringPtrOutput)
}

type KeyVaultParameterReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultParameterReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultParameterReference)(nil)).Elem()
}

func (o KeyVaultParameterReferencePtrOutput) ToKeyVaultParameterReferencePtrOutput() KeyVaultParameterReferencePtrOutput {
	return o
}

func (o KeyVaultParameterReferencePtrOutput) ToKeyVaultParameterReferencePtrOutputWithContext(ctx context.Context) KeyVaultParameterReferencePtrOutput {
	return o
}

func (o KeyVaultParameterReferencePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KeyVaultParameterReference] {
	return pulumix.Output[*KeyVaultParameterReference]{
		OutputState: o.OutputState,
	}
}

func (o KeyVaultParameterReferencePtrOutput) Elem() KeyVaultParameterReferenceOutput {
	return o.ApplyT(func(v *KeyVaultParameterReference) KeyVaultParameterReference {
		if v != nil {
			return *v
		}
		var ret KeyVaultParameterReference
		return ret
	}).(KeyVaultParameterReferenceOutput)
}

// Azure Key Vault reference.
func (o KeyVaultParameterReferencePtrOutput) KeyVault() KeyVaultReferencePtrOutput {
	return o.ApplyT(func(v *KeyVaultParameterReference) *KeyVaultReference {
		if v == nil {
			return nil
		}
		return &v.KeyVault
	}).(KeyVaultReferencePtrOutput)
}

// Azure Key Vault secret name.
func (o KeyVaultParameterReferencePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultParameterReference) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Azure Key Vault secret version.
func (o KeyVaultParameterReferencePtrOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultParameterReference) *string {
		if v == nil {
			return nil
		}
		return v.SecretVersion
	}).(pulumi.StringPtrOutput)
}

// Azure Key Vault reference.
type KeyVaultReference struct {
	// Azure Key Vault resource id.
	Id string `pulumi:"id"`
}

// KeyVaultReferenceInput is an input type that accepts KeyVaultReferenceArgs and KeyVaultReferenceOutput values.
// You can construct a concrete instance of `KeyVaultReferenceInput` via:
//
//	KeyVaultReferenceArgs{...}
type KeyVaultReferenceInput interface {
	pulumi.Input

	ToKeyVaultReferenceOutput() KeyVaultReferenceOutput
	ToKeyVaultReferenceOutputWithContext(context.Context) KeyVaultReferenceOutput
}

// Azure Key Vault reference.
type KeyVaultReferenceArgs struct {
	// Azure Key Vault resource id.
	Id pulumi.StringInput `pulumi:"id"`
}

func (KeyVaultReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReference)(nil)).Elem()
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferenceOutput() KeyVaultReferenceOutput {
	return i.ToKeyVaultReferenceOutputWithContext(context.Background())
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferenceOutputWithContext(ctx context.Context) KeyVaultReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceOutput)
}

func (i KeyVaultReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[KeyVaultReference] {
	return pulumix.Output[KeyVaultReference]{
		OutputState: i.ToKeyVaultReferenceOutputWithContext(ctx).OutputState,
	}
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return i.ToKeyVaultReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceOutput).ToKeyVaultReferencePtrOutputWithContext(ctx)
}

// KeyVaultReferencePtrInput is an input type that accepts KeyVaultReferenceArgs, KeyVaultReferencePtr and KeyVaultReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultReferencePtrInput` via:
//
//	        KeyVaultReferenceArgs{...}
//
//	or:
//
//	        nil
type KeyVaultReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput
	ToKeyVaultReferencePtrOutputWithContext(context.Context) KeyVaultReferencePtrOutput
}

type keyVaultReferencePtrType KeyVaultReferenceArgs

func KeyVaultReferencePtr(v *KeyVaultReferenceArgs) KeyVaultReferencePtrInput {
	return (*keyVaultReferencePtrType)(v)
}

func (*keyVaultReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultReference)(nil)).Elem()
}

func (i *keyVaultReferencePtrType) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return i.ToKeyVaultReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultReferencePtrType) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferencePtrOutput)
}

func (i *keyVaultReferencePtrType) ToOutput(ctx context.Context) pulumix.Output[*KeyVaultReference] {
	return pulumix.Output[*KeyVaultReference]{
		OutputState: i.ToKeyVaultReferencePtrOutputWithContext(ctx).OutputState,
	}
}

// Azure Key Vault reference.
type KeyVaultReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReference)(nil)).Elem()
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferenceOutput() KeyVaultReferenceOutput {
	return o
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferenceOutputWithContext(ctx context.Context) KeyVaultReferenceOutput {
	return o
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return o.ToKeyVaultReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultReferenceOutput) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultReference) *KeyVaultReference {
		return &v
	}).(KeyVaultReferencePtrOutput)
}

func (o KeyVaultReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[KeyVaultReference] {
	return pulumix.Output[KeyVaultReference]{
		OutputState: o.OutputState,
	}
}

// Azure Key Vault resource id.
func (o KeyVaultReferenceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultReference) string { return v.Id }).(pulumi.StringOutput)
}

type KeyVaultReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultReference)(nil)).Elem()
}

func (o KeyVaultReferencePtrOutput) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return o
}

func (o KeyVaultReferencePtrOutput) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return o
}

func (o KeyVaultReferencePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KeyVaultReference] {
	return pulumix.Output[*KeyVaultReference]{
		OutputState: o.OutputState,
	}
}

func (o KeyVaultReferencePtrOutput) Elem() KeyVaultReferenceOutput {
	return o.ApplyT(func(v *KeyVaultReference) KeyVaultReference {
		if v != nil {
			return *v
		}
		var ret KeyVaultReference
		return ret
	}).(KeyVaultReferenceOutput)
}

// Azure Key Vault resource id.
func (o KeyVaultReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultReference) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents a Template Spec artifact containing an embedded Azure Resource Manager template for use as a linked template.
type LinkedTemplateArtifact struct {
	// A filesystem safe relative path of the artifact.
	Path string `pulumi:"path"`
	// The Azure Resource Manager template.
	Template interface{} `pulumi:"template"`
}

// LinkedTemplateArtifactInput is an input type that accepts LinkedTemplateArtifactArgs and LinkedTemplateArtifactOutput values.
// You can construct a concrete instance of `LinkedTemplateArtifactInput` via:
//
//	LinkedTemplateArtifactArgs{...}
type LinkedTemplateArtifactInput interface {
	pulumi.Input

	ToLinkedTemplateArtifactOutput() LinkedTemplateArtifactOutput
	ToLinkedTemplateArtifactOutputWithContext(context.Context) LinkedTemplateArtifactOutput
}

// Represents a Template Spec artifact containing an embedded Azure Resource Manager template for use as a linked template.
type LinkedTemplateArtifactArgs struct {
	// A filesystem safe relative path of the artifact.
	Path pulumi.StringInput `pulumi:"path"`
	// The Azure Resource Manager template.
	Template pulumi.Input `pulumi:"template"`
}

func (LinkedTemplateArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedTemplateArtifact)(nil)).Elem()
}

func (i LinkedTemplateArtifactArgs) ToLinkedTemplateArtifactOutput() LinkedTemplateArtifactOutput {
	return i.ToLinkedTemplateArtifactOutputWithContext(context.Background())
}

func (i LinkedTemplateArtifactArgs) ToLinkedTemplateArtifactOutputWithContext(ctx context.Context) LinkedTemplateArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedTemplateArtifactOutput)
}

func (i LinkedTemplateArtifactArgs) ToOutput(ctx context.Context) pulumix.Output[LinkedTemplateArtifact] {
	return pulumix.Output[LinkedTemplateArtifact]{
		OutputState: i.ToLinkedTemplateArtifactOutputWithContext(ctx).OutputState,
	}
}

// LinkedTemplateArtifactArrayInput is an input type that accepts LinkedTemplateArtifactArray and LinkedTemplateArtifactArrayOutput values.
// You can construct a concrete instance of `LinkedTemplateArtifactArrayInput` via:
//
//	LinkedTemplateArtifactArray{ LinkedTemplateArtifactArgs{...} }
type LinkedTemplateArtifactArrayInput interface {
	pulumi.Input

	ToLinkedTemplateArtifactArrayOutput() LinkedTemplateArtifactArrayOutput
	ToLinkedTemplateArtifactArrayOutputWithContext(context.Context) LinkedTemplateArtifactArrayOutput
}

type LinkedTemplateArtifactArray []LinkedTemplateArtifactInput

func (LinkedTemplateArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedTemplateArtifact)(nil)).Elem()
}

func (i LinkedTemplateArtifactArray) ToLinkedTemplateArtifactArrayOutput() LinkedTemplateArtifactArrayOutput {
	return i.ToLinkedTemplateArtifactArrayOutputWithContext(context.Background())
}

func (i LinkedTemplateArtifactArray) ToLinkedTemplateArtifactArrayOutputWithContext(ctx context.Context) LinkedTemplateArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedTemplateArtifactArrayOutput)
}

func (i LinkedTemplateArtifactArray) ToOutput(ctx context.Context) pulumix.Output[[]LinkedTemplateArtifact] {
	return pulumix.Output[[]LinkedTemplateArtifact]{
		OutputState: i.ToLinkedTemplateArtifactArrayOutputWithContext(ctx).OutputState,
	}
}

// Represents a Template Spec artifact containing an embedded Azure Resource Manager template for use as a linked template.
type LinkedTemplateArtifactOutput struct{ *pulumi.OutputState }

func (LinkedTemplateArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedTemplateArtifact)(nil)).Elem()
}

func (o LinkedTemplateArtifactOutput) ToLinkedTemplateArtifactOutput() LinkedTemplateArtifactOutput {
	return o
}

func (o LinkedTemplateArtifactOutput) ToLinkedTemplateArtifactOutputWithContext(ctx context.Context) LinkedTemplateArtifactOutput {
	return o
}

func (o LinkedTemplateArtifactOutput) ToOutput(ctx context.Context) pulumix.Output[LinkedTemplateArtifact] {
	return pulumix.Output[LinkedTemplateArtifact]{
		OutputState: o.OutputState,
	}
}

// A filesystem safe relative path of the artifact.
func (o LinkedTemplateArtifactOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedTemplateArtifact) string { return v.Path }).(pulumi.StringOutput)
}

// The Azure Resource Manager template.
func (o LinkedTemplateArtifactOutput) Template() pulumi.AnyOutput {
	return o.ApplyT(func(v LinkedTemplateArtifact) interface{} { return v.Template }).(pulumi.AnyOutput)
}

type LinkedTemplateArtifactArrayOutput struct{ *pulumi.OutputState }

func (LinkedTemplateArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedTemplateArtifact)(nil)).Elem()
}

func (o LinkedTemplateArtifactArrayOutput) ToLinkedTemplateArtifactArrayOutput() LinkedTemplateArtifactArrayOutput {
	return o
}

func (o LinkedTemplateArtifactArrayOutput) ToLinkedTemplateArtifactArrayOutputWithContext(ctx context.Context) LinkedTemplateArtifactArrayOutput {
	return o
}

func (o LinkedTemplateArtifactArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LinkedTemplateArtifact] {
	return pulumix.Output[[]LinkedTemplateArtifact]{
		OutputState: o.OutputState,
	}
}

func (o LinkedTemplateArtifactArrayOutput) Index(i pulumi.IntInput) LinkedTemplateArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedTemplateArtifact {
		return vs[0].([]LinkedTemplateArtifact)[vs[1].(int)]
	}).(LinkedTemplateArtifactOutput)
}

// Represents a Template Spec artifact containing an embedded Azure Resource Manager template for use as a linked template.
type LinkedTemplateArtifactResponse struct {
	// A filesystem safe relative path of the artifact.
	Path string `pulumi:"path"`
	// The Azure Resource Manager template.
	Template interface{} `pulumi:"template"`
}

// Represents a Template Spec artifact containing an embedded Azure Resource Manager template for use as a linked template.
type LinkedTemplateArtifactResponseOutput struct{ *pulumi.OutputState }

func (LinkedTemplateArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedTemplateArtifactResponse)(nil)).Elem()
}

func (o LinkedTemplateArtifactResponseOutput) ToLinkedTemplateArtifactResponseOutput() LinkedTemplateArtifactResponseOutput {
	return o
}

func (o LinkedTemplateArtifactResponseOutput) ToLinkedTemplateArtifactResponseOutputWithContext(ctx context.Context) LinkedTemplateArtifactResponseOutput {
	return o
}

func (o LinkedTemplateArtifactResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LinkedTemplateArtifactResponse] {
	return pulumix.Output[LinkedTemplateArtifactResponse]{
		OutputState: o.OutputState,
	}
}

// A filesystem safe relative path of the artifact.
func (o LinkedTemplateArtifactResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedTemplateArtifactResponse) string { return v.Path }).(pulumi.StringOutput)
}

// The Azure Resource Manager template.
func (o LinkedTemplateArtifactResponseOutput) Template() pulumi.AnyOutput {
	return o.ApplyT(func(v LinkedTemplateArtifactResponse) interface{} { return v.Template }).(pulumi.AnyOutput)
}

type LinkedTemplateArtifactResponseArrayOutput struct{ *pulumi.OutputState }

func (LinkedTemplateArtifactResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedTemplateArtifactResponse)(nil)).Elem()
}

func (o LinkedTemplateArtifactResponseArrayOutput) ToLinkedTemplateArtifactResponseArrayOutput() LinkedTemplateArtifactResponseArrayOutput {
	return o
}

func (o LinkedTemplateArtifactResponseArrayOutput) ToLinkedTemplateArtifactResponseArrayOutputWithContext(ctx context.Context) LinkedTemplateArtifactResponseArrayOutput {
	return o
}

func (o LinkedTemplateArtifactResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LinkedTemplateArtifactResponse] {
	return pulumix.Output[[]LinkedTemplateArtifactResponse]{
		OutputState: o.OutputState,
	}
}

func (o LinkedTemplateArtifactResponseArrayOutput) Index(i pulumi.IntInput) LinkedTemplateArtifactResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedTemplateArtifactResponse {
		return vs[0].([]LinkedTemplateArtifactResponse)[vs[1].(int)]
	}).(LinkedTemplateArtifactResponseOutput)
}

// The managed resource model.
type ManagedResourceReferenceResponse struct {
	// denyAssignment settings applied to the resource.
	DenyStatus *string `pulumi:"denyStatus"`
	// The resourceId of a resource managed by the deployment stack.
	Id string `pulumi:"id"`
	// Current management state of the resource in the deployment stack.
	Status *string `pulumi:"status"`
}

// Defaults sets the appropriate defaults for ManagedResourceReferenceResponse
func (val *ManagedResourceReferenceResponse) Defaults() *ManagedResourceReferenceResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DenyStatus == nil {
		denyStatus_ := "None"
		tmp.DenyStatus = &denyStatus_
	}
	if tmp.Status == nil {
		status_ := "None"
		tmp.Status = &status_
	}
	return &tmp
}

// The managed resource model.
type ManagedResourceReferenceResponseOutput struct{ *pulumi.OutputState }

func (ManagedResourceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceReferenceResponse)(nil)).Elem()
}

func (o ManagedResourceReferenceResponseOutput) ToManagedResourceReferenceResponseOutput() ManagedResourceReferenceResponseOutput {
	return o
}

func (o ManagedResourceReferenceResponseOutput) ToManagedResourceReferenceResponseOutputWithContext(ctx context.Context) ManagedResourceReferenceResponseOutput {
	return o
}

func (o ManagedResourceReferenceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedResourceReferenceResponse] {
	return pulumix.Output[ManagedResourceReferenceResponse]{
		OutputState: o.OutputState,
	}
}

// denyAssignment settings applied to the resource.
func (o ManagedResourceReferenceResponseOutput) DenyStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceReferenceResponse) *string { return v.DenyStatus }).(pulumi.StringPtrOutput)
}

// The resourceId of a resource managed by the deployment stack.
func (o ManagedResourceReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedResourceReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Current management state of the resource in the deployment stack.
func (o ManagedResourceReferenceResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceReferenceResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ManagedResourceReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedResourceReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedResourceReferenceResponse)(nil)).Elem()
}

func (o ManagedResourceReferenceResponseArrayOutput) ToManagedResourceReferenceResponseArrayOutput() ManagedResourceReferenceResponseArrayOutput {
	return o
}

func (o ManagedResourceReferenceResponseArrayOutput) ToManagedResourceReferenceResponseArrayOutputWithContext(ctx context.Context) ManagedResourceReferenceResponseArrayOutput {
	return o
}

func (o ManagedResourceReferenceResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ManagedResourceReferenceResponse] {
	return pulumix.Output[[]ManagedResourceReferenceResponse]{
		OutputState: o.OutputState,
	}
}

func (o ManagedResourceReferenceResponseArrayOutput) Index(i pulumi.IntInput) ManagedResourceReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedResourceReferenceResponse {
		return vs[0].([]ManagedResourceReferenceResponse)[vs[1].(int)]
	}).(ManagedResourceReferenceResponseOutput)
}

// Managed identity generic object.
type ManagedServiceIdentity struct {
	// Type of the managed identity.
	Type *string `pulumi:"type"`
	// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed identity generic object.
type ManagedServiceIdentityArgs struct {
	// Type of the managed identity.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentity] {
	return pulumix.Output[ManagedServiceIdentity]{
		OutputState: i.ToManagedServiceIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

func (i *managedServiceIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentity] {
	return pulumix.Output[*ManagedServiceIdentity]{
		OutputState: i.ToManagedServiceIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// Managed identity generic object.
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

func (o ManagedServiceIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentity] {
	return pulumix.Output[ManagedServiceIdentity]{
		OutputState: o.OutputState,
	}
}

// Type of the managed identity.
func (o ManagedServiceIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentity] {
	return pulumix.Output[*ManagedServiceIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of the managed identity.
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed identity generic object.
type ManagedServiceIdentityResponse struct {
	// ID of the Azure Active Directory.
	TenantId string `pulumi:"tenantId"`
	// Type of the managed identity.
	Type *string `pulumi:"type"`
	// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed identity generic object.
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentityResponse] {
	return pulumix.Output[ManagedServiceIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// ID of the Azure Active Directory.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of the managed identity.
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentityResponse] {
	return pulumix.Output[*ManagedServiceIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// ID of the Azure Active Directory.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of the managed identity.
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Deployment on error behavior.
type OnErrorDeployment struct {
	// The deployment to be used on error case.
	DeploymentName *string `pulumi:"deploymentName"`
	// The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
	Type *OnErrorDeploymentType `pulumi:"type"`
}

// OnErrorDeploymentInput is an input type that accepts OnErrorDeploymentArgs and OnErrorDeploymentOutput values.
// You can construct a concrete instance of `OnErrorDeploymentInput` via:
//
//	OnErrorDeploymentArgs{...}
type OnErrorDeploymentInput interface {
	pulumi.Input

	ToOnErrorDeploymentOutput() OnErrorDeploymentOutput
	ToOnErrorDeploymentOutputWithContext(context.Context) OnErrorDeploymentOutput
}

// Deployment on error behavior.
type OnErrorDeploymentArgs struct {
	// The deployment to be used on error case.
	DeploymentName pulumi.StringPtrInput `pulumi:"deploymentName"`
	// The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
	Type OnErrorDeploymentTypePtrInput `pulumi:"type"`
}

func (OnErrorDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnErrorDeployment)(nil)).Elem()
}

func (i OnErrorDeploymentArgs) ToOnErrorDeploymentOutput() OnErrorDeploymentOutput {
	return i.ToOnErrorDeploymentOutputWithContext(context.Background())
}

func (i OnErrorDeploymentArgs) ToOnErrorDeploymentOutputWithContext(ctx context.Context) OnErrorDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnErrorDeploymentOutput)
}

func (i OnErrorDeploymentArgs) ToOutput(ctx context.Context) pulumix.Output[OnErrorDeployment] {
	return pulumix.Output[OnErrorDeployment]{
		OutputState: i.ToOnErrorDeploymentOutputWithContext(ctx).OutputState,
	}
}

func (i OnErrorDeploymentArgs) ToOnErrorDeploymentPtrOutput() OnErrorDeploymentPtrOutput {
	return i.ToOnErrorDeploymentPtrOutputWithContext(context.Background())
}

func (i OnErrorDeploymentArgs) ToOnErrorDeploymentPtrOutputWithContext(ctx context.Context) OnErrorDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnErrorDeploymentOutput).ToOnErrorDeploymentPtrOutputWithContext(ctx)
}

// OnErrorDeploymentPtrInput is an input type that accepts OnErrorDeploymentArgs, OnErrorDeploymentPtr and OnErrorDeploymentPtrOutput values.
// You can construct a concrete instance of `OnErrorDeploymentPtrInput` via:
//
//	        OnErrorDeploymentArgs{...}
//
//	or:
//
//	        nil
type OnErrorDeploymentPtrInput interface {
	pulumi.Input

	ToOnErrorDeploymentPtrOutput() OnErrorDeploymentPtrOutput
	ToOnErrorDeploymentPtrOutputWithContext(context.Context) OnErrorDeploymentPtrOutput
}

type onErrorDeploymentPtrType OnErrorDeploymentArgs

func OnErrorDeploymentPtr(v *OnErrorDeploymentArgs) OnErrorDeploymentPtrInput {
	return (*onErrorDeploymentPtrType)(v)
}

func (*onErrorDeploymentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OnErrorDeployment)(nil)).Elem()
}

func (i *onErrorDeploymentPtrType) ToOnErrorDeploymentPtrOutput() OnErrorDeploymentPtrOutput {
	return i.ToOnErrorDeploymentPtrOutputWithContext(context.Background())
}

func (i *onErrorDeploymentPtrType) ToOnErrorDeploymentPtrOutputWithContext(ctx context.Context) OnErrorDeploymentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnErrorDeploymentPtrOutput)
}

func (i *onErrorDeploymentPtrType) ToOutput(ctx context.Context) pulumix.Output[*OnErrorDeployment] {
	return pulumix.Output[*OnErrorDeployment]{
		OutputState: i.ToOnErrorDeploymentPtrOutputWithContext(ctx).OutputState,
	}
}

// Deployment on error behavior.
type OnErrorDeploymentOutput struct{ *pulumi.OutputState }

func (OnErrorDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnErrorDeployment)(nil)).Elem()
}

func (o OnErrorDeploymentOutput) ToOnErrorDeploymentOutput() OnErrorDeploymentOutput {
	return o
}

func (o OnErrorDeploymentOutput) ToOnErrorDeploymentOutputWithContext(ctx context.Context) OnErrorDeploymentOutput {
	return o
}

func (o OnErrorDeploymentOutput) ToOnErrorDeploymentPtrOutput() OnErrorDeploymentPtrOutput {
	return o.ToOnErrorDeploymentPtrOutputWithContext(context.Background())
}

func (o OnErrorDeploymentOutput) ToOnErrorDeploymentPtrOutputWithContext(ctx context.Context) OnErrorDeploymentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnErrorDeployment) *OnErrorDeployment {
		return &v
	}).(OnErrorDeploymentPtrOutput)
}

func (o OnErrorDeploymentOutput) ToOutput(ctx context.Context) pulumix.Output[OnErrorDeployment] {
	return pulumix.Output[OnErrorDeployment]{
		OutputState: o.OutputState,
	}
}

// The deployment to be used on error case.
func (o OnErrorDeploymentOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnErrorDeployment) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

// The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
func (o OnErrorDeploymentOutput) Type() OnErrorDeploymentTypePtrOutput {
	return o.ApplyT(func(v OnErrorDeployment) *OnErrorDeploymentType { return v.Type }).(OnErrorDeploymentTypePtrOutput)
}

type OnErrorDeploymentPtrOutput struct{ *pulumi.OutputState }

func (OnErrorDeploymentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnErrorDeployment)(nil)).Elem()
}

func (o OnErrorDeploymentPtrOutput) ToOnErrorDeploymentPtrOutput() OnErrorDeploymentPtrOutput {
	return o
}

func (o OnErrorDeploymentPtrOutput) ToOnErrorDeploymentPtrOutputWithContext(ctx context.Context) OnErrorDeploymentPtrOutput {
	return o
}

func (o OnErrorDeploymentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OnErrorDeployment] {
	return pulumix.Output[*OnErrorDeployment]{
		OutputState: o.OutputState,
	}
}

func (o OnErrorDeploymentPtrOutput) Elem() OnErrorDeploymentOutput {
	return o.ApplyT(func(v *OnErrorDeployment) OnErrorDeployment {
		if v != nil {
			return *v
		}
		var ret OnErrorDeployment
		return ret
	}).(OnErrorDeploymentOutput)
}

// The deployment to be used on error case.
func (o OnErrorDeploymentPtrOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnErrorDeployment) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentName
	}).(pulumi.StringPtrOutput)
}

// The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
func (o OnErrorDeploymentPtrOutput) Type() OnErrorDeploymentTypePtrOutput {
	return o.ApplyT(func(v *OnErrorDeployment) *OnErrorDeploymentType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(OnErrorDeploymentTypePtrOutput)
}

// Deployment on error behavior with additional details.
type OnErrorDeploymentExtendedResponse struct {
	// The deployment to be used on error case.
	DeploymentName *string `pulumi:"deploymentName"`
	// The state of the provisioning for the on error deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
	Type *string `pulumi:"type"`
}

// Deployment on error behavior with additional details.
type OnErrorDeploymentExtendedResponseOutput struct{ *pulumi.OutputState }

func (OnErrorDeploymentExtendedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnErrorDeploymentExtendedResponse)(nil)).Elem()
}

func (o OnErrorDeploymentExtendedResponseOutput) ToOnErrorDeploymentExtendedResponseOutput() OnErrorDeploymentExtendedResponseOutput {
	return o
}

func (o OnErrorDeploymentExtendedResponseOutput) ToOnErrorDeploymentExtendedResponseOutputWithContext(ctx context.Context) OnErrorDeploymentExtendedResponseOutput {
	return o
}

func (o OnErrorDeploymentExtendedResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OnErrorDeploymentExtendedResponse] {
	return pulumix.Output[OnErrorDeploymentExtendedResponse]{
		OutputState: o.OutputState,
	}
}

// The deployment to be used on error case.
func (o OnErrorDeploymentExtendedResponseOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnErrorDeploymentExtendedResponse) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

// The state of the provisioning for the on error deployment.
func (o OnErrorDeploymentExtendedResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v OnErrorDeploymentExtendedResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
func (o OnErrorDeploymentExtendedResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnErrorDeploymentExtendedResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Entity representing the reference to the deployment parameters.
type ParametersLink struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion *string `pulumi:"contentVersion"`
	// The URI of the parameters file.
	Uri string `pulumi:"uri"`
}

// ParametersLinkInput is an input type that accepts ParametersLinkArgs and ParametersLinkOutput values.
// You can construct a concrete instance of `ParametersLinkInput` via:
//
//	ParametersLinkArgs{...}
type ParametersLinkInput interface {
	pulumi.Input

	ToParametersLinkOutput() ParametersLinkOutput
	ToParametersLinkOutputWithContext(context.Context) ParametersLinkOutput
}

// Entity representing the reference to the deployment parameters.
type ParametersLinkArgs struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion pulumi.StringPtrInput `pulumi:"contentVersion"`
	// The URI of the parameters file.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (ParametersLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParametersLink)(nil)).Elem()
}

func (i ParametersLinkArgs) ToParametersLinkOutput() ParametersLinkOutput {
	return i.ToParametersLinkOutputWithContext(context.Background())
}

func (i ParametersLinkArgs) ToParametersLinkOutputWithContext(ctx context.Context) ParametersLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParametersLinkOutput)
}

func (i ParametersLinkArgs) ToOutput(ctx context.Context) pulumix.Output[ParametersLink] {
	return pulumix.Output[ParametersLink]{
		OutputState: i.ToParametersLinkOutputWithContext(ctx).OutputState,
	}
}

func (i ParametersLinkArgs) ToParametersLinkPtrOutput() ParametersLinkPtrOutput {
	return i.ToParametersLinkPtrOutputWithContext(context.Background())
}

func (i ParametersLinkArgs) ToParametersLinkPtrOutputWithContext(ctx context.Context) ParametersLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParametersLinkOutput).ToParametersLinkPtrOutputWithContext(ctx)
}

// ParametersLinkPtrInput is an input type that accepts ParametersLinkArgs, ParametersLinkPtr and ParametersLinkPtrOutput values.
// You can construct a concrete instance of `ParametersLinkPtrInput` via:
//
//	        ParametersLinkArgs{...}
//
//	or:
//
//	        nil
type ParametersLinkPtrInput interface {
	pulumi.Input

	ToParametersLinkPtrOutput() ParametersLinkPtrOutput
	ToParametersLinkPtrOutputWithContext(context.Context) ParametersLinkPtrOutput
}

type parametersLinkPtrType ParametersLinkArgs

func ParametersLinkPtr(v *ParametersLinkArgs) ParametersLinkPtrInput {
	return (*parametersLinkPtrType)(v)
}

func (*parametersLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParametersLink)(nil)).Elem()
}

func (i *parametersLinkPtrType) ToParametersLinkPtrOutput() ParametersLinkPtrOutput {
	return i.ToParametersLinkPtrOutputWithContext(context.Background())
}

func (i *parametersLinkPtrType) ToParametersLinkPtrOutputWithContext(ctx context.Context) ParametersLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParametersLinkPtrOutput)
}

func (i *parametersLinkPtrType) ToOutput(ctx context.Context) pulumix.Output[*ParametersLink] {
	return pulumix.Output[*ParametersLink]{
		OutputState: i.ToParametersLinkPtrOutputWithContext(ctx).OutputState,
	}
}

// Entity representing the reference to the deployment parameters.
type ParametersLinkOutput struct{ *pulumi.OutputState }

func (ParametersLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParametersLink)(nil)).Elem()
}

func (o ParametersLinkOutput) ToParametersLinkOutput() ParametersLinkOutput {
	return o
}

func (o ParametersLinkOutput) ToParametersLinkOutputWithContext(ctx context.Context) ParametersLinkOutput {
	return o
}

func (o ParametersLinkOutput) ToParametersLinkPtrOutput() ParametersLinkPtrOutput {
	return o.ToParametersLinkPtrOutputWithContext(context.Background())
}

func (o ParametersLinkOutput) ToParametersLinkPtrOutputWithContext(ctx context.Context) ParametersLinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParametersLink) *ParametersLink {
		return &v
	}).(ParametersLinkPtrOutput)
}

func (o ParametersLinkOutput) ToOutput(ctx context.Context) pulumix.Output[ParametersLink] {
	return pulumix.Output[ParametersLink]{
		OutputState: o.OutputState,
	}
}

// If included, must match the ContentVersion in the template.
func (o ParametersLinkOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParametersLink) *string { return v.ContentVersion }).(pulumi.StringPtrOutput)
}

// The URI of the parameters file.
func (o ParametersLinkOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ParametersLink) string { return v.Uri }).(pulumi.StringOutput)
}

type ParametersLinkPtrOutput struct{ *pulumi.OutputState }

func (ParametersLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParametersLink)(nil)).Elem()
}

func (o ParametersLinkPtrOutput) ToParametersLinkPtrOutput() ParametersLinkPtrOutput {
	return o
}

func (o ParametersLinkPtrOutput) ToParametersLinkPtrOutputWithContext(ctx context.Context) ParametersLinkPtrOutput {
	return o
}

func (o ParametersLinkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ParametersLink] {
	return pulumix.Output[*ParametersLink]{
		OutputState: o.OutputState,
	}
}

func (o ParametersLinkPtrOutput) Elem() ParametersLinkOutput {
	return o.ApplyT(func(v *ParametersLink) ParametersLink {
		if v != nil {
			return *v
		}
		var ret ParametersLink
		return ret
	}).(ParametersLinkOutput)
}

// If included, must match the ContentVersion in the template.
func (o ParametersLinkPtrOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParametersLink) *string {
		if v == nil {
			return nil
		}
		return v.ContentVersion
	}).(pulumi.StringPtrOutput)
}

// The URI of the parameters file.
func (o ParametersLinkPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParametersLink) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Entity representing the reference to the deployment parameters.
type ParametersLinkResponse struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion *string `pulumi:"contentVersion"`
	// The URI of the parameters file.
	Uri string `pulumi:"uri"`
}

// Entity representing the reference to the deployment parameters.
type ParametersLinkResponseOutput struct{ *pulumi.OutputState }

func (ParametersLinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParametersLinkResponse)(nil)).Elem()
}

func (o ParametersLinkResponseOutput) ToParametersLinkResponseOutput() ParametersLinkResponseOutput {
	return o
}

func (o ParametersLinkResponseOutput) ToParametersLinkResponseOutputWithContext(ctx context.Context) ParametersLinkResponseOutput {
	return o
}

func (o ParametersLinkResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ParametersLinkResponse] {
	return pulumix.Output[ParametersLinkResponse]{
		OutputState: o.OutputState,
	}
}

// If included, must match the ContentVersion in the template.
func (o ParametersLinkResponseOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParametersLinkResponse) *string { return v.ContentVersion }).(pulumi.StringPtrOutput)
}

// The URI of the parameters file.
func (o ParametersLinkResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ParametersLinkResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Plan for the resource.
type Plan struct {
	// The plan ID.
	Name *string `pulumi:"name"`
	// The offer ID.
	Product *string `pulumi:"product"`
	// The promotion code.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher *string `pulumi:"publisher"`
	// The plan's version.
	Version *string `pulumi:"version"`
}

// PlanInput is an input type that accepts PlanArgs and PlanOutput values.
// You can construct a concrete instance of `PlanInput` via:
//
//	PlanArgs{...}
type PlanInput interface {
	pulumi.Input

	ToPlanOutput() PlanOutput
	ToPlanOutputWithContext(context.Context) PlanOutput
}

// Plan for the resource.
type PlanArgs struct {
	// The plan ID.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The offer ID.
	Product pulumi.StringPtrInput `pulumi:"product"`
	// The promotion code.
	PromotionCode pulumi.StringPtrInput `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// The plan's version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (i PlanArgs) ToPlanOutput() PlanOutput {
	return i.ToPlanOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput)
}

func (i PlanArgs) ToOutput(ctx context.Context) pulumix.Output[Plan] {
	return pulumix.Output[Plan]{
		OutputState: i.ToPlanOutputWithContext(ctx).OutputState,
	}
}

func (i PlanArgs) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput).ToPlanPtrOutputWithContext(ctx)
}

// PlanPtrInput is an input type that accepts PlanArgs, PlanPtr and PlanPtrOutput values.
// You can construct a concrete instance of `PlanPtrInput` via:
//
//	        PlanArgs{...}
//
//	or:
//
//	        nil
type PlanPtrInput interface {
	pulumi.Input

	ToPlanPtrOutput() PlanPtrOutput
	ToPlanPtrOutputWithContext(context.Context) PlanPtrOutput
}

type planPtrType PlanArgs

func PlanPtr(v *PlanArgs) PlanPtrInput {
	return (*planPtrType)(v)
}

func (*planPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (i *planPtrType) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i *planPtrType) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanPtrOutput)
}

func (i *planPtrType) ToOutput(ctx context.Context) pulumix.Output[*Plan] {
	return pulumix.Output[*Plan]{
		OutputState: i.ToPlanPtrOutputWithContext(ctx).OutputState,
	}
}

// Plan for the resource.
type PlanOutput struct{ *pulumi.OutputState }

func (PlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (o PlanOutput) ToPlanOutput() PlanOutput {
	return o
}

func (o PlanOutput) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return o
}

func (o PlanOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o.ToPlanPtrOutputWithContext(context.Background())
}

func (o PlanOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Plan) *Plan {
		return &v
	}).(PlanPtrOutput)
}

func (o PlanOutput) ToOutput(ctx context.Context) pulumix.Output[Plan] {
	return pulumix.Output[Plan]{
		OutputState: o.OutputState,
	}
}

// The plan ID.
func (o PlanOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The offer ID.
func (o PlanOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// The plan's version.
func (o PlanOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PlanPtrOutput struct{ *pulumi.OutputState }

func (PlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (o PlanPtrOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Plan] {
	return pulumix.Output[*Plan]{
		OutputState: o.OutputState,
	}
}

func (o PlanPtrOutput) Elem() PlanOutput {
	return o.ApplyT(func(v *Plan) Plan {
		if v != nil {
			return *v
		}
		var ret Plan
		return ret
	}).(PlanOutput)
}

// The plan ID.
func (o PlanPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The offer ID.
func (o PlanPtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanPtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The plan's version.
func (o PlanPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Plan for the resource.
type PlanResponse struct {
	// The plan ID.
	Name *string `pulumi:"name"`
	// The offer ID.
	Product *string `pulumi:"product"`
	// The promotion code.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher *string `pulumi:"publisher"`
	// The plan's version.
	Version *string `pulumi:"version"`
}

// Plan for the resource.
type PlanResponseOutput struct{ *pulumi.OutputState }

func (PlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanResponse)(nil)).Elem()
}

func (o PlanResponseOutput) ToPlanResponseOutput() PlanResponseOutput {
	return o
}

func (o PlanResponseOutput) ToPlanResponseOutputWithContext(ctx context.Context) PlanResponseOutput {
	return o
}

func (o PlanResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PlanResponse] {
	return pulumix.Output[PlanResponse]{
		OutputState: o.OutputState,
	}
}

// The plan ID.
func (o PlanResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The offer ID.
func (o PlanResponseOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanResponseOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// The plan's version.
func (o PlanResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PlanResponsePtrOutput struct{ *pulumi.OutputState }

func (PlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanResponse)(nil)).Elem()
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutput() PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutputWithContext(ctx context.Context) PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PlanResponse] {
	return pulumix.Output[*PlanResponse]{
		OutputState: o.OutputState,
	}
}

func (o PlanResponsePtrOutput) Elem() PlanResponseOutput {
	return o.ApplyT(func(v *PlanResponse) PlanResponse {
		if v != nil {
			return *v
		}
		var ret PlanResponse
		return ret
	}).(PlanResponseOutput)
}

// The plan ID.
func (o PlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The offer ID.
func (o PlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanResponsePtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The plan's version.
func (o PlanResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The provider extended location.
type ProviderExtendedLocationResponse struct {
	// The extended locations for the azure location.
	ExtendedLocations []string `pulumi:"extendedLocations"`
	// The azure location.
	Location *string `pulumi:"location"`
	// The extended location type.
	Type *string `pulumi:"type"`
}

// The provider extended location.
type ProviderExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ProviderExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderExtendedLocationResponse)(nil)).Elem()
}

func (o ProviderExtendedLocationResponseOutput) ToProviderExtendedLocationResponseOutput() ProviderExtendedLocationResponseOutput {
	return o
}

func (o ProviderExtendedLocationResponseOutput) ToProviderExtendedLocationResponseOutputWithContext(ctx context.Context) ProviderExtendedLocationResponseOutput {
	return o
}

func (o ProviderExtendedLocationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ProviderExtendedLocationResponse] {
	return pulumix.Output[ProviderExtendedLocationResponse]{
		OutputState: o.OutputState,
	}
}

// The extended locations for the azure location.
func (o ProviderExtendedLocationResponseOutput) ExtendedLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProviderExtendedLocationResponse) []string { return v.ExtendedLocations }).(pulumi.StringArrayOutput)
}

// The azure location.
func (o ProviderExtendedLocationResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderExtendedLocationResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o ProviderExtendedLocationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderExtendedLocationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ProviderExtendedLocationResponseArrayOutput struct{ *pulumi.OutputState }

func (ProviderExtendedLocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderExtendedLocationResponse)(nil)).Elem()
}

func (o ProviderExtendedLocationResponseArrayOutput) ToProviderExtendedLocationResponseArrayOutput() ProviderExtendedLocationResponseArrayOutput {
	return o
}

func (o ProviderExtendedLocationResponseArrayOutput) ToProviderExtendedLocationResponseArrayOutputWithContext(ctx context.Context) ProviderExtendedLocationResponseArrayOutput {
	return o
}

func (o ProviderExtendedLocationResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProviderExtendedLocationResponse] {
	return pulumix.Output[[]ProviderExtendedLocationResponse]{
		OutputState: o.OutputState,
	}
}

func (o ProviderExtendedLocationResponseArrayOutput) Index(i pulumi.IntInput) ProviderExtendedLocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderExtendedLocationResponse {
		return vs[0].([]ProviderExtendedLocationResponse)[vs[1].(int)]
	}).(ProviderExtendedLocationResponseOutput)
}

// Resource type managed by the resource provider.
type ProviderResourceTypeResponse struct {
	// The aliases that are supported by this resource type.
	Aliases []AliasResponse `pulumi:"aliases"`
	// The API profiles for the resource provider.
	ApiProfiles []ApiProfileResponse `pulumi:"apiProfiles"`
	// The API version.
	ApiVersions []string `pulumi:"apiVersions"`
	// The additional capabilities offered by this resource type.
	Capabilities *string `pulumi:"capabilities"`
	// The default API version.
	DefaultApiVersion string `pulumi:"defaultApiVersion"`
	// The location mappings that are supported by this resource type.
	LocationMappings []ProviderExtendedLocationResponse `pulumi:"locationMappings"`
	// The collection of locations where this resource type can be created.
	Locations []string `pulumi:"locations"`
	// The properties.
	Properties map[string]string `pulumi:"properties"`
	// The resource type.
	ResourceType *string               `pulumi:"resourceType"`
	ZoneMappings []ZoneMappingResponse `pulumi:"zoneMappings"`
}

// Resource type managed by the resource provider.
type ProviderResourceTypeResponseOutput struct{ *pulumi.OutputState }

func (ProviderResourceTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderResourceTypeResponse)(nil)).Elem()
}

func (o ProviderResourceTypeResponseOutput) ToProviderResourceTypeResponseOutput() ProviderResourceTypeResponseOutput {
	return o
}

func (o ProviderResourceTypeResponseOutput) ToProviderResourceTypeResponseOutputWithContext(ctx context.Context) ProviderResourceTypeResponseOutput {
	return o
}

func (o ProviderResourceTypeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ProviderResourceTypeResponse] {
	return pulumix.Output[ProviderResourceTypeResponse]{
		OutputState: o.OutputState,
	}
}

// The aliases that are supported by this resource type.
func (o ProviderResourceTypeResponseOutput) Aliases() AliasResponseArrayOutput {
	return o.ApplyT(func(v ProviderResourceTypeResponse) []AliasResponse { return v.Aliases }).(AliasResponseArrayOutput)
}

// The API profiles for the resource provider.
func (o ProviderResourceTypeResponseOutput) ApiProfiles() ApiProfileResponseArrayOutput {
	return o.ApplyT(func(v ProviderResourceTypeResponse) []ApiProfileResponse { return v.ApiProfiles }).(ApiProfileResponseArrayOutput)
}

// The API version.
func (o ProviderResourceTypeResponseOutput) ApiVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProviderResourceTypeResponse) []string { return v.ApiVersions }).(pulumi.StringArrayOutput)
}

// The additional capabilities offered by this resource type.
func (o ProviderResourceTypeResponseOutput) Capabilities() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderResourceTypeResponse) *string { return v.Capabilities }).(pulumi.StringPtrOutput)
}

// The default API version.
func (o ProviderResourceTypeResponseOutput) DefaultApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderResourceTypeResponse) string { return v.DefaultApiVersion }).(pulumi.StringOutput)
}

// The location mappings that are supported by this resource type.
func (o ProviderResourceTypeResponseOutput) LocationMappings() ProviderExtendedLocationResponseArrayOutput {
	return o.ApplyT(func(v ProviderResourceTypeResponse) []ProviderExtendedLocationResponse { return v.LocationMappings }).(ProviderExtendedLocationResponseArrayOutput)
}

// The collection of locations where this resource type can be created.
func (o ProviderResourceTypeResponseOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProviderResourceTypeResponse) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// The properties.
func (o ProviderResourceTypeResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProviderResourceTypeResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// The resource type.
func (o ProviderResourceTypeResponseOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderResourceTypeResponse) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

func (o ProviderResourceTypeResponseOutput) ZoneMappings() ZoneMappingResponseArrayOutput {
	return o.ApplyT(func(v ProviderResourceTypeResponse) []ZoneMappingResponse { return v.ZoneMappings }).(ZoneMappingResponseArrayOutput)
}

type ProviderResourceTypeResponseArrayOutput struct{ *pulumi.OutputState }

func (ProviderResourceTypeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderResourceTypeResponse)(nil)).Elem()
}

func (o ProviderResourceTypeResponseArrayOutput) ToProviderResourceTypeResponseArrayOutput() ProviderResourceTypeResponseArrayOutput {
	return o
}

func (o ProviderResourceTypeResponseArrayOutput) ToProviderResourceTypeResponseArrayOutputWithContext(ctx context.Context) ProviderResourceTypeResponseArrayOutput {
	return o
}

func (o ProviderResourceTypeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProviderResourceTypeResponse] {
	return pulumix.Output[[]ProviderResourceTypeResponse]{
		OutputState: o.OutputState,
	}
}

func (o ProviderResourceTypeResponseArrayOutput) Index(i pulumi.IntInput) ProviderResourceTypeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderResourceTypeResponse {
		return vs[0].([]ProviderResourceTypeResponse)[vs[1].(int)]
	}).(ProviderResourceTypeResponseOutput)
}

// Resource provider information.
type ProviderResponse struct {
	// The provider ID.
	Id string `pulumi:"id"`
	// The namespace of the resource provider.
	Namespace *string `pulumi:"namespace"`
	// The provider authorization consent state.
	ProviderAuthorizationConsentState *string `pulumi:"providerAuthorizationConsentState"`
	// The registration policy of the resource provider.
	RegistrationPolicy string `pulumi:"registrationPolicy"`
	// The registration state of the resource provider.
	RegistrationState string `pulumi:"registrationState"`
	// The collection of provider resource types.
	ResourceTypes []ProviderResourceTypeResponse `pulumi:"resourceTypes"`
}

// Resource provider information.
type ProviderResponseOutput struct{ *pulumi.OutputState }

func (ProviderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderResponse)(nil)).Elem()
}

func (o ProviderResponseOutput) ToProviderResponseOutput() ProviderResponseOutput {
	return o
}

func (o ProviderResponseOutput) ToProviderResponseOutputWithContext(ctx context.Context) ProviderResponseOutput {
	return o
}

func (o ProviderResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ProviderResponse] {
	return pulumix.Output[ProviderResponse]{
		OutputState: o.OutputState,
	}
}

// The provider ID.
func (o ProviderResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The namespace of the resource provider.
func (o ProviderResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The provider authorization consent state.
func (o ProviderResponseOutput) ProviderAuthorizationConsentState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderResponse) *string { return v.ProviderAuthorizationConsentState }).(pulumi.StringPtrOutput)
}

// The registration policy of the resource provider.
func (o ProviderResponseOutput) RegistrationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderResponse) string { return v.RegistrationPolicy }).(pulumi.StringOutput)
}

// The registration state of the resource provider.
func (o ProviderResponseOutput) RegistrationState() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderResponse) string { return v.RegistrationState }).(pulumi.StringOutput)
}

// The collection of provider resource types.
func (o ProviderResponseOutput) ResourceTypes() ProviderResourceTypeResponseArrayOutput {
	return o.ApplyT(func(v ProviderResponse) []ProviderResourceTypeResponse { return v.ResourceTypes }).(ProviderResourceTypeResponseArrayOutput)
}

type ProviderResponseArrayOutput struct{ *pulumi.OutputState }

func (ProviderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderResponse)(nil)).Elem()
}

func (o ProviderResponseArrayOutput) ToProviderResponseArrayOutput() ProviderResponseArrayOutput {
	return o
}

func (o ProviderResponseArrayOutput) ToProviderResponseArrayOutputWithContext(ctx context.Context) ProviderResponseArrayOutput {
	return o
}

func (o ProviderResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProviderResponse] {
	return pulumix.Output[[]ProviderResponse]{
		OutputState: o.OutputState,
	}
}

func (o ProviderResponseArrayOutput) Index(i pulumi.IntInput) ProviderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderResponse {
		return vs[0].([]ProviderResponse)[vs[1].(int)]
	}).(ProviderResponseOutput)
}

// The resource group properties.
type ResourceGroupPropertiesResponse struct {
	// The provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
}

// The resource group properties.
type ResourceGroupPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ResourceGroupPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGroupPropertiesResponse)(nil)).Elem()
}

func (o ResourceGroupPropertiesResponseOutput) ToResourceGroupPropertiesResponseOutput() ResourceGroupPropertiesResponseOutput {
	return o
}

func (o ResourceGroupPropertiesResponseOutput) ToResourceGroupPropertiesResponseOutputWithContext(ctx context.Context) ResourceGroupPropertiesResponseOutput {
	return o
}

func (o ResourceGroupPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceGroupPropertiesResponse] {
	return pulumix.Output[ResourceGroupPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// The provisioning state.
func (o ResourceGroupPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGroupPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The resource Id extended model.
type ResourceReferenceExtendedResponse struct {
	// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
	Error *ErrorResponseResponse `pulumi:"error"`
	// The resourceId of a resource managed by the deployment stack.
	Id string `pulumi:"id"`
}

// The resource Id extended model.
type ResourceReferenceExtendedResponseOutput struct{ *pulumi.OutputState }

func (ResourceReferenceExtendedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReferenceExtendedResponse)(nil)).Elem()
}

func (o ResourceReferenceExtendedResponseOutput) ToResourceReferenceExtendedResponseOutput() ResourceReferenceExtendedResponseOutput {
	return o
}

func (o ResourceReferenceExtendedResponseOutput) ToResourceReferenceExtendedResponseOutputWithContext(ctx context.Context) ResourceReferenceExtendedResponseOutput {
	return o
}

func (o ResourceReferenceExtendedResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceReferenceExtendedResponse] {
	return pulumix.Output[ResourceReferenceExtendedResponse]{
		OutputState: o.OutputState,
	}
}

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
func (o ResourceReferenceExtendedResponseOutput) Error() ErrorResponseResponsePtrOutput {
	return o.ApplyT(func(v ResourceReferenceExtendedResponse) *ErrorResponseResponse { return v.Error }).(ErrorResponseResponsePtrOutput)
}

// The resourceId of a resource managed by the deployment stack.
func (o ResourceReferenceExtendedResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceReferenceExtendedResponse) string { return v.Id }).(pulumi.StringOutput)
}

type ResourceReferenceExtendedResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceReferenceExtendedResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceReferenceExtendedResponse)(nil)).Elem()
}

func (o ResourceReferenceExtendedResponseArrayOutput) ToResourceReferenceExtendedResponseArrayOutput() ResourceReferenceExtendedResponseArrayOutput {
	return o
}

func (o ResourceReferenceExtendedResponseArrayOutput) ToResourceReferenceExtendedResponseArrayOutputWithContext(ctx context.Context) ResourceReferenceExtendedResponseArrayOutput {
	return o
}

func (o ResourceReferenceExtendedResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ResourceReferenceExtendedResponse] {
	return pulumix.Output[[]ResourceReferenceExtendedResponse]{
		OutputState: o.OutputState,
	}
}

func (o ResourceReferenceExtendedResponseArrayOutput) Index(i pulumi.IntInput) ResourceReferenceExtendedResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceReferenceExtendedResponse {
		return vs[0].([]ResourceReferenceExtendedResponse)[vs[1].(int)]
	}).(ResourceReferenceExtendedResponseOutput)
}

// The resource Id model.
type ResourceReferenceResponse struct {
	// The resourceId of a resource managed by the deployment stack.
	Id string `pulumi:"id"`
}

// The resource Id model.
type ResourceReferenceResponseOutput struct{ *pulumi.OutputState }

func (ResourceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReferenceResponse)(nil)).Elem()
}

func (o ResourceReferenceResponseOutput) ToResourceReferenceResponseOutput() ResourceReferenceResponseOutput {
	return o
}

func (o ResourceReferenceResponseOutput) ToResourceReferenceResponseOutputWithContext(ctx context.Context) ResourceReferenceResponseOutput {
	return o
}

func (o ResourceReferenceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceReferenceResponse] {
	return pulumix.Output[ResourceReferenceResponse]{
		OutputState: o.OutputState,
	}
}

// The resourceId of a resource managed by the deployment stack.
func (o ResourceReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

type ResourceReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceReferenceResponse)(nil)).Elem()
}

func (o ResourceReferenceResponseArrayOutput) ToResourceReferenceResponseArrayOutput() ResourceReferenceResponseArrayOutput {
	return o
}

func (o ResourceReferenceResponseArrayOutput) ToResourceReferenceResponseArrayOutputWithContext(ctx context.Context) ResourceReferenceResponseArrayOutput {
	return o
}

func (o ResourceReferenceResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ResourceReferenceResponse] {
	return pulumix.Output[[]ResourceReferenceResponse]{
		OutputState: o.OutputState,
	}
}

func (o ResourceReferenceResponseArrayOutput) Index(i pulumi.IntInput) ResourceReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceReferenceResponse {
		return vs[0].([]ResourceReferenceResponse)[vs[1].(int)]
	}).(ResourceReferenceResponseOutput)
}

// Generic object modeling results of script execution.
type ScriptStatusResponse struct {
	// ACI resource Id.
	ContainerInstanceId string `pulumi:"containerInstanceId"`
	// End time of the script execution.
	EndTime string `pulumi:"endTime"`
	// Error that is relayed from the script execution.
	Error *ErrorResponseResponse `pulumi:"error"`
	// Time the deployment script resource will expire.
	ExpirationTime string `pulumi:"expirationTime"`
	// Start time of the script execution.
	StartTime string `pulumi:"startTime"`
	// Storage account resource Id.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// Generic object modeling results of script execution.
type ScriptStatusResponseOutput struct{ *pulumi.OutputState }

func (ScriptStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptStatusResponse)(nil)).Elem()
}

func (o ScriptStatusResponseOutput) ToScriptStatusResponseOutput() ScriptStatusResponseOutput {
	return o
}

func (o ScriptStatusResponseOutput) ToScriptStatusResponseOutputWithContext(ctx context.Context) ScriptStatusResponseOutput {
	return o
}

func (o ScriptStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ScriptStatusResponse] {
	return pulumix.Output[ScriptStatusResponse]{
		OutputState: o.OutputState,
	}
}

// ACI resource Id.
func (o ScriptStatusResponseOutput) ContainerInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptStatusResponse) string { return v.ContainerInstanceId }).(pulumi.StringOutput)
}

// End time of the script execution.
func (o ScriptStatusResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptStatusResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Error that is relayed from the script execution.
func (o ScriptStatusResponseOutput) Error() ErrorResponseResponsePtrOutput {
	return o.ApplyT(func(v ScriptStatusResponse) *ErrorResponseResponse { return v.Error }).(ErrorResponseResponsePtrOutput)
}

// Time the deployment script resource will expire.
func (o ScriptStatusResponseOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptStatusResponse) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

// Start time of the script execution.
func (o ScriptStatusResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptStatusResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Storage account resource Id.
func (o ScriptStatusResponseOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptStatusResponse) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

// SKU for the resource.
type Sku struct {
	// The SKU capacity.
	Capacity *int `pulumi:"capacity"`
	// The SKU family.
	Family *string `pulumi:"family"`
	// The SKU model.
	Model *string `pulumi:"model"`
	// The SKU name.
	Name *string `pulumi:"name"`
	// The SKU size.
	Size *string `pulumi:"size"`
	// The SKU tier.
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// SKU for the resource.
type SkuArgs struct {
	// The SKU capacity.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The SKU family.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The SKU model.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// The SKU name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The SKU size.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The SKU tier.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToOutput(ctx context.Context) pulumix.Output[Sku] {
	return pulumix.Output[Sku]{
		OutputState: i.ToSkuOutputWithContext(ctx).OutputState,
	}
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

func (i *skuPtrType) ToOutput(ctx context.Context) pulumix.Output[*Sku] {
	return pulumix.Output[*Sku]{
		OutputState: i.ToSkuPtrOutputWithContext(ctx).OutputState,
	}
}

// SKU for the resource.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

func (o SkuOutput) ToOutput(ctx context.Context) pulumix.Output[Sku] {
	return pulumix.Output[Sku]{
		OutputState: o.OutputState,
	}
}

// The SKU capacity.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The SKU model.
func (o SkuOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The SKU name.
func (o SkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The SKU size.
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The SKU tier.
func (o SkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Sku] {
	return pulumix.Output[*Sku]{
		OutputState: o.OutputState,
	}
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// The SKU capacity.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The SKU model.
func (o SkuPtrOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Model
	}).(pulumi.StringPtrOutput)
}

// The SKU name.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size.
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The SKU tier.
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// SKU for the resource.
type SkuResponse struct {
	// The SKU capacity.
	Capacity *int `pulumi:"capacity"`
	// The SKU family.
	Family *string `pulumi:"family"`
	// The SKU model.
	Model *string `pulumi:"model"`
	// The SKU name.
	Name *string `pulumi:"name"`
	// The SKU size.
	Size *string `pulumi:"size"`
	// The SKU tier.
	Tier *string `pulumi:"tier"`
}

// SKU for the resource.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SkuResponse] {
	return pulumix.Output[SkuResponse]{
		OutputState: o.OutputState,
	}
}

// The SKU capacity.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The SKU family.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The SKU model.
func (o SkuResponseOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The SKU name.
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The SKU size.
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The SKU tier.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SkuResponse] {
	return pulumix.Output[*SkuResponse]{
		OutputState: o.OutputState,
	}
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// The SKU capacity.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The SKU model.
func (o SkuResponsePtrOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Model
	}).(pulumi.StringPtrOutput)
}

// The SKU name.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size.
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The SKU tier.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Settings to use an existing storage account. Valid storage account kinds are: Storage, StorageV2 and FileStorage
type StorageAccountConfiguration struct {
	// The storage account access key.
	StorageAccountKey *string `pulumi:"storageAccountKey"`
	// The storage account name.
	StorageAccountName *string `pulumi:"storageAccountName"`
}

// StorageAccountConfigurationInput is an input type that accepts StorageAccountConfigurationArgs and StorageAccountConfigurationOutput values.
// You can construct a concrete instance of `StorageAccountConfigurationInput` via:
//
//	StorageAccountConfigurationArgs{...}
type StorageAccountConfigurationInput interface {
	pulumi.Input

	ToStorageAccountConfigurationOutput() StorageAccountConfigurationOutput
	ToStorageAccountConfigurationOutputWithContext(context.Context) StorageAccountConfigurationOutput
}

// Settings to use an existing storage account. Valid storage account kinds are: Storage, StorageV2 and FileStorage
type StorageAccountConfigurationArgs struct {
	// The storage account access key.
	StorageAccountKey pulumi.StringPtrInput `pulumi:"storageAccountKey"`
	// The storage account name.
	StorageAccountName pulumi.StringPtrInput `pulumi:"storageAccountName"`
}

func (StorageAccountConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountConfiguration)(nil)).Elem()
}

func (i StorageAccountConfigurationArgs) ToStorageAccountConfigurationOutput() StorageAccountConfigurationOutput {
	return i.ToStorageAccountConfigurationOutputWithContext(context.Background())
}

func (i StorageAccountConfigurationArgs) ToStorageAccountConfigurationOutputWithContext(ctx context.Context) StorageAccountConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountConfigurationOutput)
}

func (i StorageAccountConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[StorageAccountConfiguration] {
	return pulumix.Output[StorageAccountConfiguration]{
		OutputState: i.ToStorageAccountConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i StorageAccountConfigurationArgs) ToStorageAccountConfigurationPtrOutput() StorageAccountConfigurationPtrOutput {
	return i.ToStorageAccountConfigurationPtrOutputWithContext(context.Background())
}

func (i StorageAccountConfigurationArgs) ToStorageAccountConfigurationPtrOutputWithContext(ctx context.Context) StorageAccountConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountConfigurationOutput).ToStorageAccountConfigurationPtrOutputWithContext(ctx)
}

// StorageAccountConfigurationPtrInput is an input type that accepts StorageAccountConfigurationArgs, StorageAccountConfigurationPtr and StorageAccountConfigurationPtrOutput values.
// You can construct a concrete instance of `StorageAccountConfigurationPtrInput` via:
//
//	        StorageAccountConfigurationArgs{...}
//
//	or:
//
//	        nil
type StorageAccountConfigurationPtrInput interface {
	pulumi.Input

	ToStorageAccountConfigurationPtrOutput() StorageAccountConfigurationPtrOutput
	ToStorageAccountConfigurationPtrOutputWithContext(context.Context) StorageAccountConfigurationPtrOutput
}

type storageAccountConfigurationPtrType StorageAccountConfigurationArgs

func StorageAccountConfigurationPtr(v *StorageAccountConfigurationArgs) StorageAccountConfigurationPtrInput {
	return (*storageAccountConfigurationPtrType)(v)
}

func (*storageAccountConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageAccountConfiguration)(nil)).Elem()
}

func (i *storageAccountConfigurationPtrType) ToStorageAccountConfigurationPtrOutput() StorageAccountConfigurationPtrOutput {
	return i.ToStorageAccountConfigurationPtrOutputWithContext(context.Background())
}

func (i *storageAccountConfigurationPtrType) ToStorageAccountConfigurationPtrOutputWithContext(ctx context.Context) StorageAccountConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountConfigurationPtrOutput)
}

func (i *storageAccountConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*StorageAccountConfiguration] {
	return pulumix.Output[*StorageAccountConfiguration]{
		OutputState: i.ToStorageAccountConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Settings to use an existing storage account. Valid storage account kinds are: Storage, StorageV2 and FileStorage
type StorageAccountConfigurationOutput struct{ *pulumi.OutputState }

func (StorageAccountConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountConfiguration)(nil)).Elem()
}

func (o StorageAccountConfigurationOutput) ToStorageAccountConfigurationOutput() StorageAccountConfigurationOutput {
	return o
}

func (o StorageAccountConfigurationOutput) ToStorageAccountConfigurationOutputWithContext(ctx context.Context) StorageAccountConfigurationOutput {
	return o
}

func (o StorageAccountConfigurationOutput) ToStorageAccountConfigurationPtrOutput() StorageAccountConfigurationPtrOutput {
	return o.ToStorageAccountConfigurationPtrOutputWithContext(context.Background())
}

func (o StorageAccountConfigurationOutput) ToStorageAccountConfigurationPtrOutputWithContext(ctx context.Context) StorageAccountConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageAccountConfiguration) *StorageAccountConfiguration {
		return &v
	}).(StorageAccountConfigurationPtrOutput)
}

func (o StorageAccountConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[StorageAccountConfiguration] {
	return pulumix.Output[StorageAccountConfiguration]{
		OutputState: o.OutputState,
	}
}

// The storage account access key.
func (o StorageAccountConfigurationOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountConfiguration) *string { return v.StorageAccountKey }).(pulumi.StringPtrOutput)
}

// The storage account name.
func (o StorageAccountConfigurationOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountConfiguration) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

type StorageAccountConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StorageAccountConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageAccountConfiguration)(nil)).Elem()
}

func (o StorageAccountConfigurationPtrOutput) ToStorageAccountConfigurationPtrOutput() StorageAccountConfigurationPtrOutput {
	return o
}

func (o StorageAccountConfigurationPtrOutput) ToStorageAccountConfigurationPtrOutputWithContext(ctx context.Context) StorageAccountConfigurationPtrOutput {
	return o
}

func (o StorageAccountConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StorageAccountConfiguration] {
	return pulumix.Output[*StorageAccountConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o StorageAccountConfigurationPtrOutput) Elem() StorageAccountConfigurationOutput {
	return o.ApplyT(func(v *StorageAccountConfiguration) StorageAccountConfiguration {
		if v != nil {
			return *v
		}
		var ret StorageAccountConfiguration
		return ret
	}).(StorageAccountConfigurationOutput)
}

// The storage account access key.
func (o StorageAccountConfigurationPtrOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageAccountConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountKey
	}).(pulumi.StringPtrOutput)
}

// The storage account name.
func (o StorageAccountConfigurationPtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageAccountConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// Settings to use an existing storage account. Valid storage account kinds are: Storage, StorageV2 and FileStorage
type StorageAccountConfigurationResponse struct {
	// The storage account access key.
	StorageAccountKey *string `pulumi:"storageAccountKey"`
	// The storage account name.
	StorageAccountName *string `pulumi:"storageAccountName"`
}

// Settings to use an existing storage account. Valid storage account kinds are: Storage, StorageV2 and FileStorage
type StorageAccountConfigurationResponseOutput struct{ *pulumi.OutputState }

func (StorageAccountConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountConfigurationResponse)(nil)).Elem()
}

func (o StorageAccountConfigurationResponseOutput) ToStorageAccountConfigurationResponseOutput() StorageAccountConfigurationResponseOutput {
	return o
}

func (o StorageAccountConfigurationResponseOutput) ToStorageAccountConfigurationResponseOutputWithContext(ctx context.Context) StorageAccountConfigurationResponseOutput {
	return o
}

func (o StorageAccountConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[StorageAccountConfigurationResponse] {
	return pulumix.Output[StorageAccountConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The storage account access key.
func (o StorageAccountConfigurationResponseOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountConfigurationResponse) *string { return v.StorageAccountKey }).(pulumi.StringPtrOutput)
}

// The storage account name.
func (o StorageAccountConfigurationResponseOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountConfigurationResponse) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

type StorageAccountConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageAccountConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageAccountConfigurationResponse)(nil)).Elem()
}

func (o StorageAccountConfigurationResponsePtrOutput) ToStorageAccountConfigurationResponsePtrOutput() StorageAccountConfigurationResponsePtrOutput {
	return o
}

func (o StorageAccountConfigurationResponsePtrOutput) ToStorageAccountConfigurationResponsePtrOutputWithContext(ctx context.Context) StorageAccountConfigurationResponsePtrOutput {
	return o
}

func (o StorageAccountConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StorageAccountConfigurationResponse] {
	return pulumix.Output[*StorageAccountConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o StorageAccountConfigurationResponsePtrOutput) Elem() StorageAccountConfigurationResponseOutput {
	return o.ApplyT(func(v *StorageAccountConfigurationResponse) StorageAccountConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret StorageAccountConfigurationResponse
		return ret
	}).(StorageAccountConfigurationResponseOutput)
}

// The storage account access key.
func (o StorageAccountConfigurationResponsePtrOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageAccountConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountKey
	}).(pulumi.StringPtrOutput)
}

// The storage account name.
func (o StorageAccountConfigurationResponsePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageAccountConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// A dictionary of name and value pairs.
type Tags struct {
	Tags map[string]string `pulumi:"tags"`
}

// TagsInput is an input type that accepts TagsArgs and TagsOutput values.
// You can construct a concrete instance of `TagsInput` via:
//
//	TagsArgs{...}
type TagsInput interface {
	pulumi.Input

	ToTagsOutput() TagsOutput
	ToTagsOutputWithContext(context.Context) TagsOutput
}

// A dictionary of name and value pairs.
type TagsArgs struct {
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (TagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Tags)(nil)).Elem()
}

func (i TagsArgs) ToTagsOutput() TagsOutput {
	return i.ToTagsOutputWithContext(context.Background())
}

func (i TagsArgs) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsOutput)
}

func (i TagsArgs) ToOutput(ctx context.Context) pulumix.Output[Tags] {
	return pulumix.Output[Tags]{
		OutputState: i.ToTagsOutputWithContext(ctx).OutputState,
	}
}

// A dictionary of name and value pairs.
type TagsOutput struct{ *pulumi.OutputState }

func (TagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tags)(nil)).Elem()
}

func (o TagsOutput) ToTagsOutput() TagsOutput {
	return o
}

func (o TagsOutput) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return o
}

func (o TagsOutput) ToOutput(ctx context.Context) pulumix.Output[Tags] {
	return pulumix.Output[Tags]{
		OutputState: o.OutputState,
	}
}

func (o TagsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v Tags) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A dictionary of name and value pairs.
type TagsResponse struct {
	Tags map[string]string `pulumi:"tags"`
}

// A dictionary of name and value pairs.
type TagsResponseOutput struct{ *pulumi.OutputState }

func (TagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsResponse)(nil)).Elem()
}

func (o TagsResponseOutput) ToTagsResponseOutput() TagsResponseOutput {
	return o
}

func (o TagsResponseOutput) ToTagsResponseOutputWithContext(ctx context.Context) TagsResponseOutput {
	return o
}

func (o TagsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TagsResponse] {
	return pulumix.Output[TagsResponse]{
		OutputState: o.OutputState,
	}
}

func (o TagsResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v TagsResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Entity representing the reference to the template.
type TemplateLink struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion *string `pulumi:"contentVersion"`
	// The resource id of a Template Spec. Use either the id or uri property, but not both.
	Id *string `pulumi:"id"`
	// The query string (for example, a SAS token) to be used with the templateLink URI.
	QueryString *string `pulumi:"queryString"`
	// The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
	RelativePath *string `pulumi:"relativePath"`
	// The URI of the template to deploy. Use either the uri or id property, but not both.
	Uri *string `pulumi:"uri"`
}

// TemplateLinkInput is an input type that accepts TemplateLinkArgs and TemplateLinkOutput values.
// You can construct a concrete instance of `TemplateLinkInput` via:
//
//	TemplateLinkArgs{...}
type TemplateLinkInput interface {
	pulumi.Input

	ToTemplateLinkOutput() TemplateLinkOutput
	ToTemplateLinkOutputWithContext(context.Context) TemplateLinkOutput
}

// Entity representing the reference to the template.
type TemplateLinkArgs struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion pulumi.StringPtrInput `pulumi:"contentVersion"`
	// The resource id of a Template Spec. Use either the id or uri property, but not both.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The query string (for example, a SAS token) to be used with the templateLink URI.
	QueryString pulumi.StringPtrInput `pulumi:"queryString"`
	// The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
	RelativePath pulumi.StringPtrInput `pulumi:"relativePath"`
	// The URI of the template to deploy. Use either the uri or id property, but not both.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (TemplateLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLink)(nil)).Elem()
}

func (i TemplateLinkArgs) ToTemplateLinkOutput() TemplateLinkOutput {
	return i.ToTemplateLinkOutputWithContext(context.Background())
}

func (i TemplateLinkArgs) ToTemplateLinkOutputWithContext(ctx context.Context) TemplateLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLinkOutput)
}

func (i TemplateLinkArgs) ToOutput(ctx context.Context) pulumix.Output[TemplateLink] {
	return pulumix.Output[TemplateLink]{
		OutputState: i.ToTemplateLinkOutputWithContext(ctx).OutputState,
	}
}

func (i TemplateLinkArgs) ToTemplateLinkPtrOutput() TemplateLinkPtrOutput {
	return i.ToTemplateLinkPtrOutputWithContext(context.Background())
}

func (i TemplateLinkArgs) ToTemplateLinkPtrOutputWithContext(ctx context.Context) TemplateLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLinkOutput).ToTemplateLinkPtrOutputWithContext(ctx)
}

// TemplateLinkPtrInput is an input type that accepts TemplateLinkArgs, TemplateLinkPtr and TemplateLinkPtrOutput values.
// You can construct a concrete instance of `TemplateLinkPtrInput` via:
//
//	        TemplateLinkArgs{...}
//
//	or:
//
//	        nil
type TemplateLinkPtrInput interface {
	pulumi.Input

	ToTemplateLinkPtrOutput() TemplateLinkPtrOutput
	ToTemplateLinkPtrOutputWithContext(context.Context) TemplateLinkPtrOutput
}

type templateLinkPtrType TemplateLinkArgs

func TemplateLinkPtr(v *TemplateLinkArgs) TemplateLinkPtrInput {
	return (*templateLinkPtrType)(v)
}

func (*templateLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLink)(nil)).Elem()
}

func (i *templateLinkPtrType) ToTemplateLinkPtrOutput() TemplateLinkPtrOutput {
	return i.ToTemplateLinkPtrOutputWithContext(context.Background())
}

func (i *templateLinkPtrType) ToTemplateLinkPtrOutputWithContext(ctx context.Context) TemplateLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateLinkPtrOutput)
}

func (i *templateLinkPtrType) ToOutput(ctx context.Context) pulumix.Output[*TemplateLink] {
	return pulumix.Output[*TemplateLink]{
		OutputState: i.ToTemplateLinkPtrOutputWithContext(ctx).OutputState,
	}
}

// Entity representing the reference to the template.
type TemplateLinkOutput struct{ *pulumi.OutputState }

func (TemplateLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLink)(nil)).Elem()
}

func (o TemplateLinkOutput) ToTemplateLinkOutput() TemplateLinkOutput {
	return o
}

func (o TemplateLinkOutput) ToTemplateLinkOutputWithContext(ctx context.Context) TemplateLinkOutput {
	return o
}

func (o TemplateLinkOutput) ToTemplateLinkPtrOutput() TemplateLinkPtrOutput {
	return o.ToTemplateLinkPtrOutputWithContext(context.Background())
}

func (o TemplateLinkOutput) ToTemplateLinkPtrOutputWithContext(ctx context.Context) TemplateLinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TemplateLink) *TemplateLink {
		return &v
	}).(TemplateLinkPtrOutput)
}

func (o TemplateLinkOutput) ToOutput(ctx context.Context) pulumix.Output[TemplateLink] {
	return pulumix.Output[TemplateLink]{
		OutputState: o.OutputState,
	}
}

// If included, must match the ContentVersion in the template.
func (o TemplateLinkOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLink) *string { return v.ContentVersion }).(pulumi.StringPtrOutput)
}

// The resource id of a Template Spec. Use either the id or uri property, but not both.
func (o TemplateLinkOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLink) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The query string (for example, a SAS token) to be used with the templateLink URI.
func (o TemplateLinkOutput) QueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLink) *string { return v.QueryString }).(pulumi.StringPtrOutput)
}

// The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
func (o TemplateLinkOutput) RelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLink) *string { return v.RelativePath }).(pulumi.StringPtrOutput)
}

// The URI of the template to deploy. Use either the uri or id property, but not both.
func (o TemplateLinkOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLink) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type TemplateLinkPtrOutput struct{ *pulumi.OutputState }

func (TemplateLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateLink)(nil)).Elem()
}

func (o TemplateLinkPtrOutput) ToTemplateLinkPtrOutput() TemplateLinkPtrOutput {
	return o
}

func (o TemplateLinkPtrOutput) ToTemplateLinkPtrOutputWithContext(ctx context.Context) TemplateLinkPtrOutput {
	return o
}

func (o TemplateLinkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TemplateLink] {
	return pulumix.Output[*TemplateLink]{
		OutputState: o.OutputState,
	}
}

func (o TemplateLinkPtrOutput) Elem() TemplateLinkOutput {
	return o.ApplyT(func(v *TemplateLink) TemplateLink {
		if v != nil {
			return *v
		}
		var ret TemplateLink
		return ret
	}).(TemplateLinkOutput)
}

// If included, must match the ContentVersion in the template.
func (o TemplateLinkPtrOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLink) *string {
		if v == nil {
			return nil
		}
		return v.ContentVersion
	}).(pulumi.StringPtrOutput)
}

// The resource id of a Template Spec. Use either the id or uri property, but not both.
func (o TemplateLinkPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLink) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The query string (for example, a SAS token) to be used with the templateLink URI.
func (o TemplateLinkPtrOutput) QueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLink) *string {
		if v == nil {
			return nil
		}
		return v.QueryString
	}).(pulumi.StringPtrOutput)
}

// The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
func (o TemplateLinkPtrOutput) RelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLink) *string {
		if v == nil {
			return nil
		}
		return v.RelativePath
	}).(pulumi.StringPtrOutput)
}

// The URI of the template to deploy. Use either the uri or id property, but not both.
func (o TemplateLinkPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateLink) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Entity representing the reference to the template.
type TemplateLinkResponse struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion *string `pulumi:"contentVersion"`
	// The resource id of a Template Spec. Use either the id or uri property, but not both.
	Id *string `pulumi:"id"`
	// The query string (for example, a SAS token) to be used with the templateLink URI.
	QueryString *string `pulumi:"queryString"`
	// The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
	RelativePath *string `pulumi:"relativePath"`
	// The URI of the template to deploy. Use either the uri or id property, but not both.
	Uri *string `pulumi:"uri"`
}

// Entity representing the reference to the template.
type TemplateLinkResponseOutput struct{ *pulumi.OutputState }

func (TemplateLinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateLinkResponse)(nil)).Elem()
}

func (o TemplateLinkResponseOutput) ToTemplateLinkResponseOutput() TemplateLinkResponseOutput {
	return o
}

func (o TemplateLinkResponseOutput) ToTemplateLinkResponseOutputWithContext(ctx context.Context) TemplateLinkResponseOutput {
	return o
}

func (o TemplateLinkResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TemplateLinkResponse] {
	return pulumix.Output[TemplateLinkResponse]{
		OutputState: o.OutputState,
	}
}

// If included, must match the ContentVersion in the template.
func (o TemplateLinkResponseOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLinkResponse) *string { return v.ContentVersion }).(pulumi.StringPtrOutput)
}

// The resource id of a Template Spec. Use either the id or uri property, but not both.
func (o TemplateLinkResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLinkResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The query string (for example, a SAS token) to be used with the templateLink URI.
func (o TemplateLinkResponseOutput) QueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLinkResponse) *string { return v.QueryString }).(pulumi.StringPtrOutput)
}

// The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
func (o TemplateLinkResponseOutput) RelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLinkResponse) *string { return v.RelativePath }).(pulumi.StringPtrOutput)
}

// The URI of the template to deploy. Use either the uri or id property, but not both.
func (o TemplateLinkResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateLinkResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// High-level information about a Template Spec version.
type TemplateSpecVersionInfoResponse struct {
	// Template Spec version description.
	Description string `pulumi:"description"`
	// The timestamp of when the version was created.
	TimeCreated string `pulumi:"timeCreated"`
	// The timestamp of when the version was last modified.
	TimeModified string `pulumi:"timeModified"`
}

// High-level information about a Template Spec version.
type TemplateSpecVersionInfoResponseOutput struct{ *pulumi.OutputState }

func (TemplateSpecVersionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSpecVersionInfoResponse)(nil)).Elem()
}

func (o TemplateSpecVersionInfoResponseOutput) ToTemplateSpecVersionInfoResponseOutput() TemplateSpecVersionInfoResponseOutput {
	return o
}

func (o TemplateSpecVersionInfoResponseOutput) ToTemplateSpecVersionInfoResponseOutputWithContext(ctx context.Context) TemplateSpecVersionInfoResponseOutput {
	return o
}

func (o TemplateSpecVersionInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TemplateSpecVersionInfoResponse] {
	return pulumix.Output[TemplateSpecVersionInfoResponse]{
		OutputState: o.OutputState,
	}
}

// Template Spec version description.
func (o TemplateSpecVersionInfoResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSpecVersionInfoResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The timestamp of when the version was created.
func (o TemplateSpecVersionInfoResponseOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSpecVersionInfoResponse) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The timestamp of when the version was last modified.
func (o TemplateSpecVersionInfoResponseOutput) TimeModified() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateSpecVersionInfoResponse) string { return v.TimeModified }).(pulumi.StringOutput)
}

type TemplateSpecVersionInfoResponseMapOutput struct{ *pulumi.OutputState }

func (TemplateSpecVersionInfoResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TemplateSpecVersionInfoResponse)(nil)).Elem()
}

func (o TemplateSpecVersionInfoResponseMapOutput) ToTemplateSpecVersionInfoResponseMapOutput() TemplateSpecVersionInfoResponseMapOutput {
	return o
}

func (o TemplateSpecVersionInfoResponseMapOutput) ToTemplateSpecVersionInfoResponseMapOutputWithContext(ctx context.Context) TemplateSpecVersionInfoResponseMapOutput {
	return o
}

func (o TemplateSpecVersionInfoResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]TemplateSpecVersionInfoResponse] {
	return pulumix.Output[map[string]TemplateSpecVersionInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o TemplateSpecVersionInfoResponseMapOutput) MapIndex(k pulumi.StringInput) TemplateSpecVersionInfoResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TemplateSpecVersionInfoResponse {
		return vs[0].(map[string]TemplateSpecVersionInfoResponse)[vs[1].(string)]
	}).(TemplateSpecVersionInfoResponseOutput)
}

// User-assigned managed identity.
type UserAssignedIdentityResponse struct {
	// Client App Id associated with this identity.
	ClientId string `pulumi:"clientId"`
	// Azure Active Directory principal ID associated with this identity.
	PrincipalId string `pulumi:"principalId"`
}

// User-assigned managed identity.
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserAssignedIdentityResponse] {
	return pulumix.Output[UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// Client App Id associated with this identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Azure Active Directory principal ID associated with this identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]UserAssignedIdentityResponse] {
	return pulumix.Output[map[string]UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

type ZoneMappingResponse struct {
	// The location of the zone mapping.
	Location *string  `pulumi:"location"`
	Zones    []string `pulumi:"zones"`
}

type ZoneMappingResponseOutput struct{ *pulumi.OutputState }

func (ZoneMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneMappingResponse)(nil)).Elem()
}

func (o ZoneMappingResponseOutput) ToZoneMappingResponseOutput() ZoneMappingResponseOutput {
	return o
}

func (o ZoneMappingResponseOutput) ToZoneMappingResponseOutputWithContext(ctx context.Context) ZoneMappingResponseOutput {
	return o
}

func (o ZoneMappingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ZoneMappingResponse] {
	return pulumix.Output[ZoneMappingResponse]{
		OutputState: o.OutputState,
	}
}

// The location of the zone mapping.
func (o ZoneMappingResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZoneMappingResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o ZoneMappingResponseOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZoneMappingResponse) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type ZoneMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (ZoneMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneMappingResponse)(nil)).Elem()
}

func (o ZoneMappingResponseArrayOutput) ToZoneMappingResponseArrayOutput() ZoneMappingResponseArrayOutput {
	return o
}

func (o ZoneMappingResponseArrayOutput) ToZoneMappingResponseArrayOutputWithContext(ctx context.Context) ZoneMappingResponseArrayOutput {
	return o
}

func (o ZoneMappingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ZoneMappingResponse] {
	return pulumix.Output[[]ZoneMappingResponse]{
		OutputState: o.OutputState,
	}
}

func (o ZoneMappingResponseArrayOutput) Index(i pulumi.IntInput) ZoneMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZoneMappingResponse {
		return vs[0].([]ZoneMappingResponse)[vs[1].(int)]
	}).(ZoneMappingResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AliasPathMetadataResponseOutput{})
	pulumi.RegisterOutputType(AliasPathResponseOutput{})
	pulumi.RegisterOutputType(AliasPathResponseArrayOutput{})
	pulumi.RegisterOutputType(AliasPatternResponseOutput{})
	pulumi.RegisterOutputType(AliasPatternResponsePtrOutput{})
	pulumi.RegisterOutputType(AliasResponseOutput{})
	pulumi.RegisterOutputType(AliasResponseArrayOutput{})
	pulumi.RegisterOutputType(ApiProfileResponseOutput{})
	pulumi.RegisterOutputType(ApiProfileResponseArrayOutput{})
	pulumi.RegisterOutputType(BasicDependencyResponseOutput{})
	pulumi.RegisterOutputType(BasicDependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerConfigurationOutput{})
	pulumi.RegisterOutputType(ContainerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ContainerConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ContainerConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DebugSettingOutput{})
	pulumi.RegisterOutputType(DebugSettingPtrOutput{})
	pulumi.RegisterOutputType(DebugSettingResponseOutput{})
	pulumi.RegisterOutputType(DenySettingsOutput{})
	pulumi.RegisterOutputType(DenySettingsResponseOutput{})
	pulumi.RegisterOutputType(DependencyResponseOutput{})
	pulumi.RegisterOutputType(DependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(DeploymentParameterOutput{})
	pulumi.RegisterOutputType(DeploymentParameterMapOutput{})
	pulumi.RegisterOutputType(DeploymentPropertiesOutput{})
	pulumi.RegisterOutputType(DeploymentPropertiesExtendedResponseOutput{})
	pulumi.RegisterOutputType(DeploymentStackPropertiesActionOnUnmanageOutput{})
	pulumi.RegisterOutputType(DeploymentStackPropertiesResponseActionOnUnmanageOutput{})
	pulumi.RegisterOutputType(DeploymentStacksDebugSettingOutput{})
	pulumi.RegisterOutputType(DeploymentStacksDebugSettingPtrOutput{})
	pulumi.RegisterOutputType(DeploymentStacksDebugSettingResponseOutput{})
	pulumi.RegisterOutputType(DeploymentStacksDebugSettingResponsePtrOutput{})
	pulumi.RegisterOutputType(DeploymentStacksParametersLinkOutput{})
	pulumi.RegisterOutputType(DeploymentStacksParametersLinkPtrOutput{})
	pulumi.RegisterOutputType(DeploymentStacksParametersLinkResponseOutput{})
	pulumi.RegisterOutputType(DeploymentStacksParametersLinkResponsePtrOutput{})
	pulumi.RegisterOutputType(DeploymentStacksTemplateLinkOutput{})
	pulumi.RegisterOutputType(DeploymentStacksTemplateLinkPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorResponseResponseOutput{})
	pulumi.RegisterOutputType(ErrorResponseResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorResponseResponseArrayOutput{})
	pulumi.RegisterOutputType(ExpressionEvaluationOptionsOutput{})
	pulumi.RegisterOutputType(ExpressionEvaluationOptionsPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseUserAssignedIdentitiesOutput{})
	pulumi.RegisterOutputType(IdentityResponseUserAssignedIdentitiesMapOutput{})
	pulumi.RegisterOutputType(KeyVaultParameterReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultParameterReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultReferencePtrOutput{})
	pulumi.RegisterOutputType(LinkedTemplateArtifactOutput{})
	pulumi.RegisterOutputType(LinkedTemplateArtifactArrayOutput{})
	pulumi.RegisterOutputType(LinkedTemplateArtifactResponseOutput{})
	pulumi.RegisterOutputType(LinkedTemplateArtifactResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedResourceReferenceResponseOutput{})
	pulumi.RegisterOutputType(ManagedResourceReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(OnErrorDeploymentOutput{})
	pulumi.RegisterOutputType(OnErrorDeploymentPtrOutput{})
	pulumi.RegisterOutputType(OnErrorDeploymentExtendedResponseOutput{})
	pulumi.RegisterOutputType(ParametersLinkOutput{})
	pulumi.RegisterOutputType(ParametersLinkPtrOutput{})
	pulumi.RegisterOutputType(ParametersLinkResponseOutput{})
	pulumi.RegisterOutputType(PlanOutput{})
	pulumi.RegisterOutputType(PlanPtrOutput{})
	pulumi.RegisterOutputType(PlanResponseOutput{})
	pulumi.RegisterOutputType(PlanResponsePtrOutput{})
	pulumi.RegisterOutputType(ProviderExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ProviderExtendedLocationResponseArrayOutput{})
	pulumi.RegisterOutputType(ProviderResourceTypeResponseOutput{})
	pulumi.RegisterOutputType(ProviderResourceTypeResponseArrayOutput{})
	pulumi.RegisterOutputType(ProviderResponseOutput{})
	pulumi.RegisterOutputType(ProviderResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceGroupPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ResourceReferenceExtendedResponseOutput{})
	pulumi.RegisterOutputType(ResourceReferenceExtendedResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceReferenceResponseOutput{})
	pulumi.RegisterOutputType(ResourceReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(ScriptStatusResponseOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageAccountConfigurationOutput{})
	pulumi.RegisterOutputType(StorageAccountConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StorageAccountConfigurationResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TagsOutput{})
	pulumi.RegisterOutputType(TagsResponseOutput{})
	pulumi.RegisterOutputType(TemplateLinkOutput{})
	pulumi.RegisterOutputType(TemplateLinkPtrOutput{})
	pulumi.RegisterOutputType(TemplateLinkResponseOutput{})
	pulumi.RegisterOutputType(TemplateSpecVersionInfoResponseOutput{})
	pulumi.RegisterOutputType(TemplateSpecVersionInfoResponseMapOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(ZoneMappingResponseOutput{})
	pulumi.RegisterOutputType(ZoneMappingResponseArrayOutput{})
}
